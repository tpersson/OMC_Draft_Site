{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The OMC Team \u00b6 Overview \u00b6 The OMC team is part of the ABP group at CERN , in the LNO section. We are responsible for the measurement and correction of the linear and non-linear accelerator optics in the LHC as well as other machines is the CERN accelerator complex. Our meetings can be found on our Indico page . Note - Documentation Status This site is currently under construction, incomplete, and subject to change. An existing but poor documentation can be found on the OMC twiki .","title":"The OMC Team"},{"location":"#the-omc-team","text":"","title":"The OMC Team"},{"location":"#overview","text":"The OMC team is part of the ABP group at CERN , in the LNO section. We are responsible for the measurement and correction of the linear and non-linear accelerator optics in the LHC as well as other machines is the CERN accelerator complex. Our meetings can be found on our Indico page . Note - Documentation Status This site is currently under construction, incomplete, and subject to change. An existing but poor documentation can be found on the OMC twiki .","title":"Overview"},{"location":"guis/betabeat/analysis_panel/","text":"The Beta-Beat GUI Analysis Panel \u00b6 The analysis panel provides graphical interface to visualize results from harmonic analysis performed on measured data. The results are given in the tfs format. In the analysis panel one can edit the dp/p value in the corresponding column, and see the changes applied. The Time / Space Tab \u00b6 In the Time / Space tab one can examine the phases and amplitudes, and can clean the values if needed (only TUNEX and TUNEY or NATTUNEX and NATTUNEY ). If some values are obviously not inside a given bound, the 2 marker lines (see screenshot below) can be used to set the boundaries and to remove all data outside those boundaries. The GUI will check if the removal is inside some predefined bounds to prevent accidental removal of too much data. Todo Include a screenshot of the time / space panel with relevant info highlighted (see twiki) The Frequency Tab \u00b6 The Frequency tab displays the computed frequencies for every BPM. A Get Optics button can be used to start the optics calculation. This will call an external python script again, with the results available in the Optics Panel . Todo Include a screenshot of the frequency panel.","title":"Analysis Panel"},{"location":"guis/betabeat/analysis_panel/#the-beta-beat-gui-analysis-panel","text":"The analysis panel provides graphical interface to visualize results from harmonic analysis performed on measured data. The results are given in the tfs format. In the analysis panel one can edit the dp/p value in the corresponding column, and see the changes applied.","title":"The Beta-Beat GUI Analysis Panel"},{"location":"guis/betabeat/analysis_panel/#the-time-space-tab","text":"In the Time / Space tab one can examine the phases and amplitudes, and can clean the values if needed (only TUNEX and TUNEY or NATTUNEX and NATTUNEY ). If some values are obviously not inside a given bound, the 2 marker lines (see screenshot below) can be used to set the boundaries and to remove all data outside those boundaries. The GUI will check if the removal is inside some predefined bounds to prevent accidental removal of too much data. Todo Include a screenshot of the time / space panel with relevant info highlighted (see twiki)","title":"The Time / Space Tab"},{"location":"guis/betabeat/analysis_panel/#the-frequency-tab","text":"The Frequency tab displays the computed frequencies for every BPM. A Get Optics button can be used to start the optics calculation. This will call an external python script again, with the results available in the Optics Panel . Todo Include a screenshot of the frequency panel.","title":"The Frequency Tab"},{"location":"guis/betabeat/bpm_panel/","text":"The Beta-Beat GUI BPM Panel \u00b6 The BPM panel provides a graphical interface to query and visualize information for the BPM data files. It can load data files for all supported beams, mostly binary SDDS files or files in the SDDS ASCII format. Todo Include a screenshot, possibly of settings when opening files? Opening Files and Applying SVD Cleaning \u00b6 The content of the loaded files will be displayed in two charts: One for the horizontal BPMs, One for the vertical BPMs. Todo Include a screenshot with two BPM panels. The charts are interactive and can be used to zoom in/out, or focus on a given rectangle of the shown data. The charts can display either the measured amplitude values over turns for every BPM from the list or display the phase space, which is calculated by two consecutive BPMs. Additional functionality is done while loading a file. If SVD is enabled in the settings, the external SVD cleaning python script will be called for the current file during the loading process. If SVD cleaning detects and removes bad BPMs, they can be reviewed inside the bad BPM pane. Todo Include a screenshot of the bad bpms panel. Removing Turns and Computing an Average \u00b6 The buttons on the top left side of the pane provide useful features to handle the BPM data. Remove Turns can be used to cut turns from the start or the end, to focus on a specified range of the data. Todo Include a screenshot of before-after comparison for Remove Turns . Create Average allows loading several data files too visualize their average repesentations on the same graph, which helps detecting differences or reducing noise. Todo Include a screenshot of Create Average effect. Do Analysis spawns the configuration dialogue for the external analysis. This will call an external program to perform harmonic analysis of the BPM data, in order to compute tunes and similar beam properties. The results from the analysis can be seen in the Analysis Panel . Todo Include of screenshot of Do Analysis dialogue window. Note The Create Average option requires synchronized data from withing the same bounds, otherwise the results will be meaningless. The figure below shows three runs from LHC beam one with synchronized peaks for every turn and their corresponding averages.","title":"BPM Panel"},{"location":"guis/betabeat/bpm_panel/#the-beta-beat-gui-bpm-panel","text":"The BPM panel provides a graphical interface to query and visualize information for the BPM data files. It can load data files for all supported beams, mostly binary SDDS files or files in the SDDS ASCII format. Todo Include a screenshot, possibly of settings when opening files?","title":"The Beta-Beat GUI BPM Panel"},{"location":"guis/betabeat/bpm_panel/#opening-files-and-applying-svd-cleaning","text":"The content of the loaded files will be displayed in two charts: One for the horizontal BPMs, One for the vertical BPMs. Todo Include a screenshot with two BPM panels. The charts are interactive and can be used to zoom in/out, or focus on a given rectangle of the shown data. The charts can display either the measured amplitude values over turns for every BPM from the list or display the phase space, which is calculated by two consecutive BPMs. Additional functionality is done while loading a file. If SVD is enabled in the settings, the external SVD cleaning python script will be called for the current file during the loading process. If SVD cleaning detects and removes bad BPMs, they can be reviewed inside the bad BPM pane. Todo Include a screenshot of the bad bpms panel.","title":"Opening Files and Applying SVD Cleaning"},{"location":"guis/betabeat/bpm_panel/#removing-turns-and-computing-an-average","text":"The buttons on the top left side of the pane provide useful features to handle the BPM data. Remove Turns can be used to cut turns from the start or the end, to focus on a specified range of the data. Todo Include a screenshot of before-after comparison for Remove Turns . Create Average allows loading several data files too visualize their average repesentations on the same graph, which helps detecting differences or reducing noise. Todo Include a screenshot of Create Average effect. Do Analysis spawns the configuration dialogue for the external analysis. This will call an external program to perform harmonic analysis of the BPM data, in order to compute tunes and similar beam properties. The results from the analysis can be seen in the Analysis Panel . Todo Include of screenshot of Do Analysis dialogue window. Note The Create Average option requires synchronized data from withing the same bounds, otherwise the results will be meaningless. The figure below shows three runs from LHC beam one with synchronized peaks for every turn and their corresponding averages.","title":"Removing Turns and Computing an Average"},{"location":"guis/betabeat/correction_panel/","text":"The Beta-Beat GUI Correction Panel \u00b6 The Correction panel displays the corrections computed from the Optics panel to bring back the measured machine to nominal model conditions. It provides an Open Knob Panel button to access the LHC beam process list. The Knob Panel \u00b6 Through the Knob Panel , corrections can be provided directly inside the LHC beam system. Info Being inside of the Technical Network is required for the KnobPanel. To do so, ssh into one of the hosts, for instance cs-ccr-dev<number>.cern.ch . In the Knob Panel , one can create Knobs (in the Creation tab) by using the previously computed corrections. To create a knob, one or several beam processes have to be selected. Once selected, the corresponding optics will appear. At least one optic has to be selected. After providing a Knob name , the Create Knob button will create a new Knob in the LSA database. Todo Include a screenshot of the Knob Panel on creation tab The View Knobs tab displays a list of all BETA-BEATING Knobs. By selecting one, the user can examine or visualize the values attributed to each component. Todo Include a screenshot of the Knob Panel view knobs table Todo Include a screenshot of the Knob Panel view knobs chart","title":"Correction Panel"},{"location":"guis/betabeat/correction_panel/#the-beta-beat-gui-correction-panel","text":"The Correction panel displays the corrections computed from the Optics panel to bring back the measured machine to nominal model conditions. It provides an Open Knob Panel button to access the LHC beam process list.","title":"The Beta-Beat GUI Correction Panel"},{"location":"guis/betabeat/correction_panel/#the-knob-panel","text":"Through the Knob Panel , corrections can be provided directly inside the LHC beam system. Info Being inside of the Technical Network is required for the KnobPanel. To do so, ssh into one of the hosts, for instance cs-ccr-dev<number>.cern.ch . In the Knob Panel , one can create Knobs (in the Creation tab) by using the previously computed corrections. To create a knob, one or several beam processes have to be selected. Once selected, the corresponding optics will appear. At least one optic has to be selected. After providing a Knob name , the Create Knob button will create a new Knob in the LSA database. Todo Include a screenshot of the Knob Panel on creation tab The View Knobs tab displays a list of all BETA-BEATING Knobs. By selecting one, the user can examine or visualize the values attributed to each component. Todo Include a screenshot of the Knob Panel view knobs table Todo Include a screenshot of the Knob Panel view knobs chart","title":"The Knob Panel"},{"location":"guis/betabeat/gui/","text":"The Beta-Beat GUI \u00b6 The Beta-Beat GUI provides different functionalities separated in multiple views, in the form of a graphical interface. The GUI can be ran locally, provided you have access to afs , but most importantly directly from the CERN Control Center. This section provides a short overview for the main features. The GUI provides several panels, each for a defined use and with a set of options and results: The BPM Panel for loading measurements files, displaying data and launching analysis. The Analysis Panel to display and manipulate the results of harmonic analysis on measurement data. The Optics Panel to compare computed optics to nominal models. The Correction Panel to display the computed necessary corrections to reach the nominal model. This site will guide you through the GUI's layout and functionality. For starters, see here about running the GUI.","title":"The Beta-Beat GUI"},{"location":"guis/betabeat/gui/#the-beta-beat-gui","text":"The Beta-Beat GUI provides different functionalities separated in multiple views, in the form of a graphical interface. The GUI can be ran locally, provided you have access to afs , but most importantly directly from the CERN Control Center. This section provides a short overview for the main features. The GUI provides several panels, each for a defined use and with a set of options and results: The BPM Panel for loading measurements files, displaying data and launching analysis. The Analysis Panel to display and manipulate the results of harmonic analysis on measurement data. The Optics Panel to compare computed optics to nominal models. The Correction Panel to display the computed necessary corrections to reach the nominal model. This site will guide you through the GUI's layout and functionality. For starters, see here about running the GUI.","title":"The Beta-Beat GUI"},{"location":"guis/betabeat/ide_install/","text":"IDE Setup \u00b6 The easiest way to develop the GUI is using the modified Eclipse versions provided by Accsoft-Eclipse . There is also an installation guide available . For people using pycharm it might make sense to use IntelliJ IDEA, however we do not yet know how to export a JAR (see also GUI Releases ). As both IDEs require CommonBuildNextGeneration (CBNG) to resolve dependencies and make releases, one should either run these from somewhere in the Technical Network (e.g. from the dev-server ) or mount the required paths via sshfs as described here . Installation \u00b6 Eclipse Download your preferred version from their download page and install. With this version, CBNG comes automatically installed and can be used by simply dragging the desired project into the CBNG window . For more info see the accsoft eclipse wiki . IntelliJ IDEA Download your preferred version from their download page and install. CBNG needs to be setup in IDEA manually, by setting the Gradle home path in: File -> Settings -> Build, Execution, Deployment -> Build Tools -> Gradle to the specified location /user/pcrops/devtools/CBNG/PRO/ A more extensive guide can be found in the CBNG Wiki for IDEA integration . Alternatively, run CBNG directly from the commandline instead. CBNG from the Command Line Another sometimes easier alternative that works with any IDE is to run CBNGs bob with the desired command (e.g. build , dependencies , eclipse , idea ) in the folder of the project from the commandline. The full path to bob is: /user/pcrops/devtools/CBNG/PRO/bin/bob See bob --help for instructions about its commands. Importing a Project \u00b6 The project can be imported using the git-integrations of the IDEs directly, using the Gitlab paths below. This should be straightforward, but you are giving up some control. In the next subsections the manual path of getting the source-code into the IDE is outlined in the hope to point to some pitfalls that may occur and how to avoid them. Firstly, you should clone the desired repository to an adequate location on your hard-drive, depending on which project you want to work on: Beta-Beat GUI git clone https://gitlab.cern.ch/acc-co/lhc/lhc-app-beta-beating Kmod GUI git clone https://gitlab.cern.ch/acc-co/lhc/lhc-app-kmod You then simply import the project into your IDE. IntelliJ Specificity For IntelliJ, you might have to Create an empty build.gradle file if you want to trigger a gradle import dialogue where you need to choose use local gradle distribution and set the gradle home to /user/pcrops/devtools/CBNG/PRO/bin/bob ( as above ) Go to File -> Project Structure ... -> Modules and set the Dependencies storage format to Eclipse (.classpath) . This one you should check on a regular basis, as it tends to reset itself. To make it runnable, you will have to use CBNG to resolve dependencies and build the project first. Depending on your IDE you should run CBNGs eclipse or idea followed by build . Running dependencies can help. No one in the OMC-Team is a CBNG expert, and sometimes running these commands leads to the desired outcome (of a runnable project) or not depending on the color of the DG 's clothing. Running the GUI \u00b6 If everything worked fine, the Gui should now be runnable via the void main() function in the main.Main.java , which can be invoked by right-clicking on main.Main and choosing Run or manually setting a Java Run configuration in the Run menu. Useful Links \u00b6 CBNG Wiki Accsoft-Eclipse Downloads Accsoft Eclipse Wiki","title":"IDE Setup"},{"location":"guis/betabeat/ide_install/#ide-setup","text":"The easiest way to develop the GUI is using the modified Eclipse versions provided by Accsoft-Eclipse . There is also an installation guide available . For people using pycharm it might make sense to use IntelliJ IDEA, however we do not yet know how to export a JAR (see also GUI Releases ). As both IDEs require CommonBuildNextGeneration (CBNG) to resolve dependencies and make releases, one should either run these from somewhere in the Technical Network (e.g. from the dev-server ) or mount the required paths via sshfs as described here .","title":"IDE Setup"},{"location":"guis/betabeat/ide_install/#installation","text":"Eclipse Download your preferred version from their download page and install. With this version, CBNG comes automatically installed and can be used by simply dragging the desired project into the CBNG window . For more info see the accsoft eclipse wiki . IntelliJ IDEA Download your preferred version from their download page and install. CBNG needs to be setup in IDEA manually, by setting the Gradle home path in: File -> Settings -> Build, Execution, Deployment -> Build Tools -> Gradle to the specified location /user/pcrops/devtools/CBNG/PRO/ A more extensive guide can be found in the CBNG Wiki for IDEA integration . Alternatively, run CBNG directly from the commandline instead. CBNG from the Command Line Another sometimes easier alternative that works with any IDE is to run CBNGs bob with the desired command (e.g. build , dependencies , eclipse , idea ) in the folder of the project from the commandline. The full path to bob is: /user/pcrops/devtools/CBNG/PRO/bin/bob See bob --help for instructions about its commands.","title":"Installation"},{"location":"guis/betabeat/ide_install/#importing-a-project","text":"The project can be imported using the git-integrations of the IDEs directly, using the Gitlab paths below. This should be straightforward, but you are giving up some control. In the next subsections the manual path of getting the source-code into the IDE is outlined in the hope to point to some pitfalls that may occur and how to avoid them. Firstly, you should clone the desired repository to an adequate location on your hard-drive, depending on which project you want to work on: Beta-Beat GUI git clone https://gitlab.cern.ch/acc-co/lhc/lhc-app-beta-beating Kmod GUI git clone https://gitlab.cern.ch/acc-co/lhc/lhc-app-kmod You then simply import the project into your IDE. IntelliJ Specificity For IntelliJ, you might have to Create an empty build.gradle file if you want to trigger a gradle import dialogue where you need to choose use local gradle distribution and set the gradle home to /user/pcrops/devtools/CBNG/PRO/bin/bob ( as above ) Go to File -> Project Structure ... -> Modules and set the Dependencies storage format to Eclipse (.classpath) . This one you should check on a regular basis, as it tends to reset itself. To make it runnable, you will have to use CBNG to resolve dependencies and build the project first. Depending on your IDE you should run CBNGs eclipse or idea followed by build . Running dependencies can help. No one in the OMC-Team is a CBNG expert, and sometimes running these commands leads to the desired outcome (of a runnable project) or not depending on the color of the DG 's clothing.","title":"Importing a Project"},{"location":"guis/betabeat/ide_install/#running-the-gui","text":"If everything worked fine, the Gui should now be runnable via the void main() function in the main.Main.java , which can be invoked by right-clicking on main.Main and choosing Run or manually setting a Java Run configuration in the Run menu.","title":"Running the GUI"},{"location":"guis/betabeat/ide_install/#useful-links","text":"CBNG Wiki Accsoft-Eclipse Downloads Accsoft Eclipse Wiki","title":"Useful Links"},{"location":"guis/betabeat/omc3/","text":"Beta-Beat Gui for OMC3 \u00b6 This page is meant for people, who know the old Gui and want to use the omc3 functionality in the GUI now! For now, this is still in beta and has a lot of not-yet-implemented functionality. On the up-side, it also has some new-and-improved functionality over the Beta-Beat-Source ( master ) branch. The basic optics analysis and plotting work! Important changes \u00b6 Python \u00b6 In the Beam-Selection Window you need to give it a python-binary (e.g. venv/bin/python ). Best would be if you have a local virtual environment. This needs to have omc3 installed as a package . See omc3 on github . pip install git+https://github.com/pylhc/omc3.git This is because python calls are now made by module, i.e.: python -m omc3.module arg1 arg2 ... Settings \u00b6 Settings are now all in one place (the settings-button on top). Entries in the settings that are lists (e.g. 'Turns' which will be STARTTURN ENDTURN ) are given as space-separated values, NOT comma separated. Settings can be reverted as long as you do not click apply. Settings are applied automatically on OK . Settings are reset to last applied on Cancel . Opening Files \u00b6 Each tab has now an Open Files button, which opens only the files specific to this tab. The magic + button is gone, as its functionality was confusing (and there were different stories about its workings). Optics Plotting \u00b6 RDT and CRDT plots are added dynamically depending on the files present in the respective folders. Nicer names and more structure in the tree. Backend was rewritten, so it is now more modular and easier to add new plot-types. Keys in Plots \u00b6 Left Button : Draw and zoom into rectangle. Middle Button : Auto-zoom (in 3 Steps: 4\u03c3, 3\u03c3, 2\u03c3). Right Button : Undo last step. Shift + Right Button : Undo all steps (reset plot). Mouse Wheel : Zoom relative to mouse position. Shift + Mouse Wheel : Zoom y-axis relative to mouse position. Alt + Mouse Wheel : Zoom relative to plot center. Shift + Alt + Mouse Wheel : Zoom y-axis relative to plot center. Nattune Updater \u00b6 You can set a frequency range and it does not redo the analysis but just picks the highest peak in that range and assigns it to NATTUNE in the lin-file. This should be very helpful for amplitude detuning analysis. Known not to work: \u00b6 Other accelerators than the LHC (you can trick it a bit, though, by choosing LHC and then changing the accelerator manually in the settings ). Removing turns (but you can set Start and End turn in the settings). BBQ compensation for amplitude detuning can't be called directly from the GUI. Things that do not work as they are not implemented in omc3 : Global Corrections, SegmentBySegment, Spectrum Plot Export cannot export both planes into one axis, Optics Plot Export cannot have separate limits for the two plots, Optics Plot Export cannot export CRDT plots, Do NOT use the Nattune-Updater (in the Spectrum panel) if you have free kicks (it adds a NATTUNE -Column to the lin-file). Bug Reporting If you find bugs, please make JIRA tickets with the OMC3-GUI label.","title":"Differences"},{"location":"guis/betabeat/omc3/#beta-beat-gui-for-omc3","text":"This page is meant for people, who know the old Gui and want to use the omc3 functionality in the GUI now! For now, this is still in beta and has a lot of not-yet-implemented functionality. On the up-side, it also has some new-and-improved functionality over the Beta-Beat-Source ( master ) branch. The basic optics analysis and plotting work!","title":"Beta-Beat Gui for OMC3"},{"location":"guis/betabeat/omc3/#important-changes","text":"","title":"Important changes"},{"location":"guis/betabeat/omc3/#python","text":"In the Beam-Selection Window you need to give it a python-binary (e.g. venv/bin/python ). Best would be if you have a local virtual environment. This needs to have omc3 installed as a package . See omc3 on github . pip install git+https://github.com/pylhc/omc3.git This is because python calls are now made by module, i.e.: python -m omc3.module arg1 arg2 ...","title":"Python"},{"location":"guis/betabeat/omc3/#settings","text":"Settings are now all in one place (the settings-button on top). Entries in the settings that are lists (e.g. 'Turns' which will be STARTTURN ENDTURN ) are given as space-separated values, NOT comma separated. Settings can be reverted as long as you do not click apply. Settings are applied automatically on OK . Settings are reset to last applied on Cancel .","title":"Settings"},{"location":"guis/betabeat/omc3/#opening-files","text":"Each tab has now an Open Files button, which opens only the files specific to this tab. The magic + button is gone, as its functionality was confusing (and there were different stories about its workings).","title":"Opening Files"},{"location":"guis/betabeat/omc3/#optics-plotting","text":"RDT and CRDT plots are added dynamically depending on the files present in the respective folders. Nicer names and more structure in the tree. Backend was rewritten, so it is now more modular and easier to add new plot-types.","title":"Optics Plotting"},{"location":"guis/betabeat/omc3/#keys-in-plots","text":"Left Button : Draw and zoom into rectangle. Middle Button : Auto-zoom (in 3 Steps: 4\u03c3, 3\u03c3, 2\u03c3). Right Button : Undo last step. Shift + Right Button : Undo all steps (reset plot). Mouse Wheel : Zoom relative to mouse position. Shift + Mouse Wheel : Zoom y-axis relative to mouse position. Alt + Mouse Wheel : Zoom relative to plot center. Shift + Alt + Mouse Wheel : Zoom y-axis relative to plot center.","title":"Keys in Plots"},{"location":"guis/betabeat/omc3/#nattune-updater","text":"You can set a frequency range and it does not redo the analysis but just picks the highest peak in that range and assigns it to NATTUNE in the lin-file. This should be very helpful for amplitude detuning analysis.","title":"Nattune Updater"},{"location":"guis/betabeat/omc3/#known-not-to-work","text":"Other accelerators than the LHC (you can trick it a bit, though, by choosing LHC and then changing the accelerator manually in the settings ). Removing turns (but you can set Start and End turn in the settings). BBQ compensation for amplitude detuning can't be called directly from the GUI. Things that do not work as they are not implemented in omc3 : Global Corrections, SegmentBySegment, Spectrum Plot Export cannot export both planes into one axis, Optics Plot Export cannot have separate limits for the two plots, Optics Plot Export cannot export CRDT plots, Do NOT use the Nattune-Updater (in the Spectrum panel) if you have free kicks (it adds a NATTUNE -Column to the lin-file). Bug Reporting If you find bugs, please make JIRA tickets with the OMC3-GUI label.","title":"Known not to work:"},{"location":"guis/betabeat/optics_panel/","text":"The Beta-Beat GUI Optics Panel \u00b6 The Optics Panel provides graphical interface to compare the computed optics to the nominal model. There are in total three main tabs for the optics panel: The Optics tab, where a tree menu (on the left) provides many physical properties to be displayed. The Segment-by-Segment: Segment tab, to have a look at properties in a pre-defined segment of the machine. The Segment-by-Segment: Element tab, to have a look at properties for a pre-defined list of elements in the machine. Optics Tab \u00b6 By default, the user is taken to the Optics tab. A wide variety of computed physical properties can be visualized across the entire machine. Todo Include a screenshot with the main optics tab. Segment-by-Segment: Segment Tab \u00b6 A list of pre-defined segments of the machine can be selected to view properties across said segment. Todo Include a screenshot of segment selection. In the event that one wants to visualize a specific, non pre-defined segment, it is possible to create a new one. To do so: In the Optics tab, pick the start BPM by clicking on a BPM point on the optics chart. Pick the end BPM by clicking on another BPM point. A pop-up appears in which the name of the new segment has to be entered. Todo Include a screenshot of the new segment creation dialogue. Clicking Go will call for another python script and take you to the Segment-by-Segment tab to view the results. Segment-by-Segment: Element Tab \u00b6 Pre-defined lists of elements can be selected to view properties across said elements. The working is similar to the one for different segments . Todo Include a screenshot of the element tab. Computing Corrections \u00b6 The Correction button at the bottom left of the optics panel can be used to calculate the optics corrections for the beam process. The settings dialogue offers a wide range of different options for corrections. This will call different external python scripts again. These scripts calculate corrections for beta-beat, coupling and horizontal and vertical dispersion using the computed response matrices. The following methods implement different correction algorithms: Coupling : Single beam correction of coupling resonances and vertical dispersion. Global correction : Single beam correction of phase, beta and horizontal dispersion. Iterative correction : Two-beams version of the global correction. Chromatic coupling : Single beam correction of chromatic coupling using skew sextupoles at dispersive locations. Note The Iterative correction method is currently not compatible and thus disabled. The results are outputted in the changeparameters files. These files store the magnet names and corresponding correction strengths. They are also displayed in the Correction Panel .","title":"Optics Panel"},{"location":"guis/betabeat/optics_panel/#the-beta-beat-gui-optics-panel","text":"The Optics Panel provides graphical interface to compare the computed optics to the nominal model. There are in total three main tabs for the optics panel: The Optics tab, where a tree menu (on the left) provides many physical properties to be displayed. The Segment-by-Segment: Segment tab, to have a look at properties in a pre-defined segment of the machine. The Segment-by-Segment: Element tab, to have a look at properties for a pre-defined list of elements in the machine.","title":"The Beta-Beat GUI Optics Panel"},{"location":"guis/betabeat/optics_panel/#optics-tab","text":"By default, the user is taken to the Optics tab. A wide variety of computed physical properties can be visualized across the entire machine. Todo Include a screenshot with the main optics tab.","title":"Optics Tab"},{"location":"guis/betabeat/optics_panel/#segment-by-segment-segment-tab","text":"A list of pre-defined segments of the machine can be selected to view properties across said segment. Todo Include a screenshot of segment selection. In the event that one wants to visualize a specific, non pre-defined segment, it is possible to create a new one. To do so: In the Optics tab, pick the start BPM by clicking on a BPM point on the optics chart. Pick the end BPM by clicking on another BPM point. A pop-up appears in which the name of the new segment has to be entered. Todo Include a screenshot of the new segment creation dialogue. Clicking Go will call for another python script and take you to the Segment-by-Segment tab to view the results.","title":"Segment-by-Segment: Segment Tab"},{"location":"guis/betabeat/optics_panel/#segment-by-segment-element-tab","text":"Pre-defined lists of elements can be selected to view properties across said elements. The working is similar to the one for different segments . Todo Include a screenshot of the element tab.","title":"Segment-by-Segment: Element Tab"},{"location":"guis/betabeat/optics_panel/#computing-corrections","text":"The Correction button at the bottom left of the optics panel can be used to calculate the optics corrections for the beam process. The settings dialogue offers a wide range of different options for corrections. This will call different external python scripts again. These scripts calculate corrections for beta-beat, coupling and horizontal and vertical dispersion using the computed response matrices. The following methods implement different correction algorithms: Coupling : Single beam correction of coupling resonances and vertical dispersion. Global correction : Single beam correction of phase, beta and horizontal dispersion. Iterative correction : Two-beams version of the global correction. Chromatic coupling : Single beam correction of chromatic coupling using skew sextupoles at dispersive locations. Note The Iterative correction method is currently not compatible and thus disabled. The results are outputted in the changeparameters files. These files store the magnet names and corresponding correction strengths. They are also displayed in the Correction Panel .","title":"Computing Corrections"},{"location":"guis/betabeat/releases/","text":"Software Releases \u00b6","title":"Releases"},{"location":"guis/betabeat/releases/#software-releases","text":"","title":"Software Releases"},{"location":"guis/betabeat/running/","text":"Running the Beta-Beat GUI \u00b6 The GUI can be started from inside eclipse (which will prompt you with the logging window) or from an external archive site . At the following links, you can also find: The current production version . The current development version . The complete list of releases . Please note that these site are currently available only to devices connected to the CERN network. From there, open the .jnlp executable inside a browser, or call it with javaws from the command line. For convenience, there are scripts to run it directly from afs at the following location: /afs/cern.ch/eng/sl/lintrack/Beta-Beat.src/GUI Compatibility Issues Since javaws (java web start) makes trouble due to intenal security mechanisms, a replacement named jws was developed and has to be used to run the jlnp file. For further information see the jws Confluence page. Requirements \u00b6 The following are required to run the Beta-Beat GUI: A Linux-based operating system (running CentOS 7 as do the CERN servers is recommended). A version of Java>=7 . The jws replacement for javaws . Being inside of the Technical Network is required for the KnobPanel . To do so, ssh -X into one of the hosts, for instance to cs-ccr-dev<number>.cern.ch . Setting Your Defaults The GUI defaults to specific locations for which Beta-Beat.src directory to use, the input path of you data, etc. Different key-value pairs can be set inside for the desired defaults, for example: beam = LHCB1_RUNII_2018 inputPath = /some/afs/location/with/your/data/ outputPath = /some/afs/location/with/your/results/ betaBeatPath = /some/afs/location/with/your/Beta-Beat.src/ loadData = True oldFolderStructure = False These values can be set by a file named bbgui_user.properties (with the above syntax) in either the current working directory, from where you run the GUI, or in your home folder. The latter is only used if there is no such file in the current working directory. If you want to use a specific file located anywhere, you can also give the path to this file as the first and only argument when starting the GUI. It is also possible to set each of these default values by passing them as flag arguments to the GUI call, e.g: --beam LHCB1_RUNII_2018 --inputPath /some/afs/location/with/your/data/ Troubleshooting \u00b6 You may encounter the following errors: Problems with execution due to disabled Java \u00b6 If you encounter a complaint about Java being too old, try using /mcr/bin/javaws . Failure javaws http://abwww/ap/dist/lhc/lhc-app-beta-beating/PRO/BetaBeating-Control-3t.jnlp Disabling Java as it is too old and likely to be insecure. To reenable use jcontrol utility Success /mcr/bin/javaws http://abwww/ap/dist/lhc/lhc-app-beta-beating/PRO/BetaBeating-Control-3t.jnlp Unspecific Error \u00b6 Failure Any random error If so, check that you can import numpy from the omc-anaconda-python . If this leads to the previously raised error, then the permissions are broken. Either fix the permissions on afs or ask someone to do so for you.","title":"Basics"},{"location":"guis/betabeat/running/#running-the-beta-beat-gui","text":"The GUI can be started from inside eclipse (which will prompt you with the logging window) or from an external archive site . At the following links, you can also find: The current production version . The current development version . The complete list of releases . Please note that these site are currently available only to devices connected to the CERN network. From there, open the .jnlp executable inside a browser, or call it with javaws from the command line. For convenience, there are scripts to run it directly from afs at the following location: /afs/cern.ch/eng/sl/lintrack/Beta-Beat.src/GUI Compatibility Issues Since javaws (java web start) makes trouble due to intenal security mechanisms, a replacement named jws was developed and has to be used to run the jlnp file. For further information see the jws Confluence page.","title":"Running the Beta-Beat GUI"},{"location":"guis/betabeat/running/#requirements","text":"The following are required to run the Beta-Beat GUI: A Linux-based operating system (running CentOS 7 as do the CERN servers is recommended). A version of Java>=7 . The jws replacement for javaws . Being inside of the Technical Network is required for the KnobPanel . To do so, ssh -X into one of the hosts, for instance to cs-ccr-dev<number>.cern.ch . Setting Your Defaults The GUI defaults to specific locations for which Beta-Beat.src directory to use, the input path of you data, etc. Different key-value pairs can be set inside for the desired defaults, for example: beam = LHCB1_RUNII_2018 inputPath = /some/afs/location/with/your/data/ outputPath = /some/afs/location/with/your/results/ betaBeatPath = /some/afs/location/with/your/Beta-Beat.src/ loadData = True oldFolderStructure = False These values can be set by a file named bbgui_user.properties (with the above syntax) in either the current working directory, from where you run the GUI, or in your home folder. The latter is only used if there is no such file in the current working directory. If you want to use a specific file located anywhere, you can also give the path to this file as the first and only argument when starting the GUI. It is also possible to set each of these default values by passing them as flag arguments to the GUI call, e.g: --beam LHCB1_RUNII_2018 --inputPath /some/afs/location/with/your/data/","title":"Requirements"},{"location":"guis/betabeat/running/#troubleshooting","text":"You may encounter the following errors:","title":"Troubleshooting"},{"location":"guis/betabeat/running/#problems-with-execution-due-to-disabled-java","text":"If you encounter a complaint about Java being too old, try using /mcr/bin/javaws . Failure javaws http://abwww/ap/dist/lhc/lhc-app-beta-beating/PRO/BetaBeating-Control-3t.jnlp Disabling Java as it is too old and likely to be insecure. To reenable use jcontrol utility Success /mcr/bin/javaws http://abwww/ap/dist/lhc/lhc-app-beta-beating/PRO/BetaBeating-Control-3t.jnlp","title":"Problems with execution due to disabled Java"},{"location":"guis/betabeat/running/#unspecific-error","text":"Failure Any random error If so, check that you can import numpy from the omc-anaconda-python . If this leads to the previously raised error, then the permissions are broken. Either fix the permissions on afs or ask someone to do so for you.","title":"Unspecific Error"},{"location":"guis/kmod/autotrim/","text":"Auto Trim \u00b6 The AutoTrim functionality combines all existing tasks in the Kmod GUI. The user can choose tasks to do for each IP . The AutoTrim then executes all the trimming tasks and analyzing tasks in the best order possible to optimize the process. The user can input parameters once to do the k-modulation and other analysis tasks on many IP 's. The results and current status of each process is displayed on the main panel. The AutoTrim provides something like a pipeline of many k-modulations and their analyzing tasks. First Time AutoTrim If you are in the CCC and have never used the AutoTrim before, follow these steps: Open the AutoTrimDialog by clicking on the AutoTim button located on the left side of the main panel. Add the IPs you want to trim or analyze with the buttons on the left side. Input the trim parameter or load an existing trim for each IP tab. Select the analyzing options you want to execute. Input the needed values for the trim and all the optional tasks. Once everything is set up, right press the Start button and select the directory where to save the results (It will save the results depending on the trim time and IP . See wiki for more information). The AutoTrim will now check if the orbit feedback is on and the tune feedback is off. Make sure to put them in the desired state. The ResultsView will open and the AutoTrim gets started. AutoTrim Panel \u00b6 The InputPanel \u00b6 This input panel provides all the options to set every parameter for k-modulation. On the left panel the user can choose which IP to trim or analyze. Depending on the parameters, the panel will show input panels for the specific IPs: each panel has a top bar with optional tasks that can be executed after the trim as well as an input field for the current energy. The energy value is gathered live from the LHC, but can be edited. Underneath is another tabbed pane for each task in the current process which needs some user input. By pressing the start button, it will ask the user for the save directory and then starts the AutoTrim process. AutoTrim will then create a result folder for each IP , open the ResultsView on the main panel and start the pipeline of processes. The chosen save directory is the root directory. The AutoTrim will then create a subdirectory for each IP where the result files are stored. Todo Include screenshot of Trim/Analyze InputPanel The ResultsView \u00b6 The ResultsView is the main panel of an AutoTrim process. It is built as a tabbed pane which holds the content of the processes for many IPs and displays information such as process status, results, etc. The status panel and the result panel are the main components for each process. At the top is a thread queue bar which displays all the active, finished and scheduled threads. Todo Include screenshot of thread queue Tip By double-clicking on the IP label of the tabbed pane its possible to extract the IP panel in another frame. It will snap back to the tabbed pane if it gets closed by the user. The Status Panel \u00b6 The status panel shows information about the current process, with the currently running task is displayed at the top. The user can click through the list of tasks to see start/end time, input parameters, log entries, and the current status. There is also a panel for the input parameter of thes current task. This has to be done in the actual task code since the view doesn't have a reference to the task. The last panel is the logger text area for each task. Per default, it will show the last logging entry with the corresponding time, but the user can expand the list by clicking on the drop-down button. Todo Include screenshot of status panel Status Types Explained Status / Color Description Starting, green Task is creating all the needed objects or loads some data from a file.* Running, green Main functionality of this task is currently executed. Finished, blue Task finished without any problems. Waiting, blue Task is waiting for some synchronization variable.* Scheduled, grey Task is in the queue and ready to be executed. Canceled, yellow Task got canceled by the user (Not possible still a big TODO). Crashed, red Task crashed because an exception is fired or a critical error occurred. * Not used at the moment, might be useful later (non thread-safe functionality, etc.) Loading Existing Trims from Timber \u00b6 The AutoTrim provides two ways to add existing trim data to the process queue: Adding the selected Timber entry directly to an existing IP tab in the AutoTrim panel. There, one can only select the trim entries depending on the IP of the tab. Selecting any trim you want with the Trim-Selection panel, which will then add the selected trims as tabs to the AutoTrim panel. Load a trim directly to an AutoTrim-Tab \u00b6 Start by creating your IP tab by clicking on the button on the left side: tick the Load existing trim checkbox and it will open the trim selection panel. Expand the date picker and choose the day when the trim was executed. Left click on the trim you want to load and press the select button. The loaded trim date is then displayed on the trim panel and all the other input fields for the Full IP Trim are disabled, as input is not needed. To discard the loaded trim and proceed with the Full IP Trim instead, untick the Load existing trim checkbox. Todo Include screenshots of trim selection in autotrim The Trim-Selection Panel \u00b6 The Trim-Selection panel will add the selected trim data as tabs to the AutoTrim panel. It also provides some basic options to apply to every tab, such as setting analyzing the orbit to default. This might be the best option if you want to reanalyze many trims with the same model. Open this panel by pressing the Load Trims button located on the bottom center of the AutoTrim panel. Filter the Timber entries by IP and date, then select the trim entries in the Search Results panel and press the green Add selected trim button. The trims are now selected and displayed in the Selected Trims panel. By clicking on confirm the tabs will be added to the AutoTrim panel. You can now set some basic options for the selected trims in the Options pane. These values are automatically set as preset values for the loaded trim tabs. Todo Include screenshots of trim selection wizard Simulation Mode \u00b6 The kmod application provides two different modes to execute all its functionality: The Measurement mode , which is the standard mode and should be used in the control center to gather real data from the LHC. The Simulation mode , which only simulates these live measurements. If you start a normal trim task in Simulation mode the AutoTrim will load the last trim data from timber. This data is then displayed like a normal trim during a live measurement. The energy value is not automatically loaded from Timber, and uses a preset value of 6500.0 GeV. The AutoTrim won't check if the Orbit and Tune feedback is on or off. Todo Include gif like in the twiki","title":"Using Auto Trim"},{"location":"guis/kmod/autotrim/#auto-trim","text":"The AutoTrim functionality combines all existing tasks in the Kmod GUI. The user can choose tasks to do for each IP . The AutoTrim then executes all the trimming tasks and analyzing tasks in the best order possible to optimize the process. The user can input parameters once to do the k-modulation and other analysis tasks on many IP 's. The results and current status of each process is displayed on the main panel. The AutoTrim provides something like a pipeline of many k-modulations and their analyzing tasks. First Time AutoTrim If you are in the CCC and have never used the AutoTrim before, follow these steps: Open the AutoTrimDialog by clicking on the AutoTim button located on the left side of the main panel. Add the IPs you want to trim or analyze with the buttons on the left side. Input the trim parameter or load an existing trim for each IP tab. Select the analyzing options you want to execute. Input the needed values for the trim and all the optional tasks. Once everything is set up, right press the Start button and select the directory where to save the results (It will save the results depending on the trim time and IP . See wiki for more information). The AutoTrim will now check if the orbit feedback is on and the tune feedback is off. Make sure to put them in the desired state. The ResultsView will open and the AutoTrim gets started.","title":"Auto Trim"},{"location":"guis/kmod/autotrim/#autotrim-panel","text":"","title":"AutoTrim Panel"},{"location":"guis/kmod/autotrim/#the-inputpanel","text":"This input panel provides all the options to set every parameter for k-modulation. On the left panel the user can choose which IP to trim or analyze. Depending on the parameters, the panel will show input panels for the specific IPs: each panel has a top bar with optional tasks that can be executed after the trim as well as an input field for the current energy. The energy value is gathered live from the LHC, but can be edited. Underneath is another tabbed pane for each task in the current process which needs some user input. By pressing the start button, it will ask the user for the save directory and then starts the AutoTrim process. AutoTrim will then create a result folder for each IP , open the ResultsView on the main panel and start the pipeline of processes. The chosen save directory is the root directory. The AutoTrim will then create a subdirectory for each IP where the result files are stored. Todo Include screenshot of Trim/Analyze InputPanel","title":"The InputPanel"},{"location":"guis/kmod/autotrim/#the-resultsview","text":"The ResultsView is the main panel of an AutoTrim process. It is built as a tabbed pane which holds the content of the processes for many IPs and displays information such as process status, results, etc. The status panel and the result panel are the main components for each process. At the top is a thread queue bar which displays all the active, finished and scheduled threads. Todo Include screenshot of thread queue Tip By double-clicking on the IP label of the tabbed pane its possible to extract the IP panel in another frame. It will snap back to the tabbed pane if it gets closed by the user.","title":"The ResultsView"},{"location":"guis/kmod/autotrim/#the-status-panel","text":"The status panel shows information about the current process, with the currently running task is displayed at the top. The user can click through the list of tasks to see start/end time, input parameters, log entries, and the current status. There is also a panel for the input parameter of thes current task. This has to be done in the actual task code since the view doesn't have a reference to the task. The last panel is the logger text area for each task. Per default, it will show the last logging entry with the corresponding time, but the user can expand the list by clicking on the drop-down button. Todo Include screenshot of status panel Status Types Explained Status / Color Description Starting, green Task is creating all the needed objects or loads some data from a file.* Running, green Main functionality of this task is currently executed. Finished, blue Task finished without any problems. Waiting, blue Task is waiting for some synchronization variable.* Scheduled, grey Task is in the queue and ready to be executed. Canceled, yellow Task got canceled by the user (Not possible still a big TODO). Crashed, red Task crashed because an exception is fired or a critical error occurred. * Not used at the moment, might be useful later (non thread-safe functionality, etc.)","title":"The Status Panel"},{"location":"guis/kmod/autotrim/#loading-existing-trims-from-timber","text":"The AutoTrim provides two ways to add existing trim data to the process queue: Adding the selected Timber entry directly to an existing IP tab in the AutoTrim panel. There, one can only select the trim entries depending on the IP of the tab. Selecting any trim you want with the Trim-Selection panel, which will then add the selected trims as tabs to the AutoTrim panel.","title":"Loading Existing Trims from Timber"},{"location":"guis/kmod/autotrim/#load-a-trim-directly-to-an-autotrim-tab","text":"Start by creating your IP tab by clicking on the button on the left side: tick the Load existing trim checkbox and it will open the trim selection panel. Expand the date picker and choose the day when the trim was executed. Left click on the trim you want to load and press the select button. The loaded trim date is then displayed on the trim panel and all the other input fields for the Full IP Trim are disabled, as input is not needed. To discard the loaded trim and proceed with the Full IP Trim instead, untick the Load existing trim checkbox. Todo Include screenshots of trim selection in autotrim","title":"Load a trim directly to an AutoTrim-Tab"},{"location":"guis/kmod/autotrim/#the-trim-selection-panel","text":"The Trim-Selection panel will add the selected trim data as tabs to the AutoTrim panel. It also provides some basic options to apply to every tab, such as setting analyzing the orbit to default. This might be the best option if you want to reanalyze many trims with the same model. Open this panel by pressing the Load Trims button located on the bottom center of the AutoTrim panel. Filter the Timber entries by IP and date, then select the trim entries in the Search Results panel and press the green Add selected trim button. The trims are now selected and displayed in the Selected Trims panel. By clicking on confirm the tabs will be added to the AutoTrim panel. You can now set some basic options for the selected trims in the Options pane. These values are automatically set as preset values for the loaded trim tabs. Todo Include screenshots of trim selection wizard","title":"The Trim-Selection Panel"},{"location":"guis/kmod/autotrim/#simulation-mode","text":"The kmod application provides two different modes to execute all its functionality: The Measurement mode , which is the standard mode and should be used in the control center to gather real data from the LHC. The Simulation mode , which only simulates these live measurements. If you start a normal trim task in Simulation mode the AutoTrim will load the last trim data from timber. This data is then displayed like a normal trim during a live measurement. The energy value is not automatically loaded from Timber, and uses a preset value of 6500.0 GeV. The AutoTrim won't check if the Orbit and Tune feedback is on or off. Todo Include gif like in the twiki","title":"Simulation Mode"},{"location":"guis/kmod/full_ip_trim/","text":"Performing a Full IP Trim \u00b6 The Full IP Trim module of the GUI executes the K-Modulation on a selected Interaction Point with its predefined quadrupoles. Each bigger experiment like ATLAS (IP1), ALICE (IP2), CMS (IP5) and LHCb (IP8) is referred to by its corresponding number in the LHC complex. Todo Include screenshots of IP selection By using this module, the quadrupole identifier and several other parameters are predefined to the corresponding Interaction Points. After the modulation is done, the trim data is present on the database and can be visualized and analyzed using the measurement view dialog. In order to start the K-Modulation on a magnet, the power converter has to be accessed using the CERN provided LSA Java API. The available parameters are the following: Delta I: Change of magnet strength in Amperes. Default value is 6.0A . Frequency: How fast the magnet strength is changed. Default value is 0.013 . Cycles: How many times the modulation is done. Default value is 3 . Todo Include screenshot of trim parameters input Result Panel \u00b6 While the Full IP Trim is executed the current and the tune values are displayed live in the result panel. After the modulation is done, it will show the whole trim results in the corresponding ResultPanel of this trimming task. The trim results are stored in the save directory of the current IP . Todo Include screenshot of full IP trim with tune history results","title":"Full IP Trim"},{"location":"guis/kmod/full_ip_trim/#performing-a-full-ip-trim","text":"The Full IP Trim module of the GUI executes the K-Modulation on a selected Interaction Point with its predefined quadrupoles. Each bigger experiment like ATLAS (IP1), ALICE (IP2), CMS (IP5) and LHCb (IP8) is referred to by its corresponding number in the LHC complex. Todo Include screenshots of IP selection By using this module, the quadrupole identifier and several other parameters are predefined to the corresponding Interaction Points. After the modulation is done, the trim data is present on the database and can be visualized and analyzed using the measurement view dialog. In order to start the K-Modulation on a magnet, the power converter has to be accessed using the CERN provided LSA Java API. The available parameters are the following: Delta I: Change of magnet strength in Amperes. Default value is 6.0A . Frequency: How fast the magnet strength is changed. Default value is 0.013 . Cycles: How many times the modulation is done. Default value is 3 . Todo Include screenshot of trim parameters input","title":"Performing a Full IP Trim"},{"location":"guis/kmod/full_ip_trim/#result-panel","text":"While the Full IP Trim is executed the current and the tune values are displayed live in the result panel. After the modulation is done, it will show the whole trim results in the corresponding ResultPanel of this trimming task. The trim results are stored in the save directory of the current IP . Todo Include screenshot of full IP trim with tune history results","title":"Result Panel"},{"location":"guis/kmod/gui/","text":"The Kmod GUI \u00b6 The Kmod GUI provides functionality to perform K-Modulation either as a full IP trim or through an individual magnet circuit, in the form of a graphical interface. It also has the ability to extract and analyze data from previous trims. This site will guide you through the GUI's layout and functionality. For starters, see here about running the GUI.","title":"The Kmod GUI"},{"location":"guis/kmod/gui/#the-kmod-gui","text":"The Kmod GUI provides functionality to perform K-Modulation either as a full IP trim or through an individual magnet circuit, in the form of a graphical interface. It also has the ability to extract and analyze data from previous trims. This site will guide you through the GUI's layout and functionality. For starters, see here about running the GUI.","title":"The Kmod GUI"},{"location":"guis/kmod/ide_install/","text":"IDE Setup \u00b6 The easiest way to develop the GUI is using the modified Eclipse versions provided by Accsoft-Eclipse . There is also an installation guide available . For people using pycharm it might make sense to use IntelliJ IDEA, however we do not yet know how to export a JAR (see also GUI Releases ). As both IDEs require CommonBuildNextGeneration (CBNG) to resolve dependencies and make releases, one should either run these from somewhere in the Technical Network (e.g. from the dev-server ) or mount the required paths via sshfs as described here . Installation \u00b6 Eclipse Download your preferred version from their download page and install. With this version, CBNG comes automatically installed and can be used by simply dragging the desired project into the CBNG window . For more info see the accsoft eclipse wiki . IntelliJ IDEA Download your preferred version from their download page and install. CBNG needs to be setup in IDEA manually, by setting the Gradle home path in: File -> Settings -> Build, Execution, Deployment -> Build Tools -> Gradle to the specified location /user/pcrops/devtools/CBNG/PRO/ A more extensive guide can be found in the CBNG Wiki for IDEA integration . Alternatively, run CBNG directly from the commandline instead. CBNG from the Command Line Another sometimes easier alternative that works with any IDE is to run CBNGs bob with the desired command (e.g. build , dependencies , eclipse , idea ) in the folder of the project from the commandline. The full path to bob is: /user/pcrops/devtools/CBNG/PRO/bin/bob See bob --help for instructions about its commands. Importing a Project \u00b6 The project can be imported using the git-integrations of the IDEs directly, using the Gitlab paths below. This should be straightforward, but you are giving up some control. In the next subsections the manual path of getting the source-code into the IDE is outlined in the hope to point to some pitfalls that may occur and how to avoid them. Firstly, you should clone the desired repository to an adequate location on your hard-drive, depending on which project you want to work on: Beta-Beat GUI git clone https://gitlab.cern.ch/acc-co/lhc/lhc-app-beta-beating Kmod GUI git clone https://gitlab.cern.ch/acc-co/lhc/lhc-app-kmod You then simply import the project into your IDE. IntelliJ Specificity For IntelliJ, you might have to Create an empty build.gradle file if you want to trigger a gradle import dialogue where you need to choose use local gradle distribution and set the gradle home to /user/pcrops/devtools/CBNG/PRO/bin/bob ( as above ) Go to File -> Project Structure ... -> Modules and set the Dependencies storage format to Eclipse (.classpath) . This one you should check on a regular basis, as it tends to reset itself. To make it runnable, you will have to use CBNG to resolve dependencies and build the project first. Depending on your IDE you should run CBNGs eclipse or idea followed by build . Running dependencies can help. No one in the OMC-Team is a CBNG expert, and sometimes running these commands leads to the desired outcome (of a runnable project) or not depending on the color of the DG 's clothing. Running the GUI \u00b6 If everything worked fine, the Gui should now be runnable via the void main() function in the main.Main.java , which can be invoked by right-clicking on main.Main and choosing Run or manually setting a Java Run configuration in the Run menu. Useful Links \u00b6 CBNG Wiki Accsoft-Eclipse Downloads Accsoft Eclipse Wiki","title":"IDE Setup"},{"location":"guis/kmod/ide_install/#ide-setup","text":"The easiest way to develop the GUI is using the modified Eclipse versions provided by Accsoft-Eclipse . There is also an installation guide available . For people using pycharm it might make sense to use IntelliJ IDEA, however we do not yet know how to export a JAR (see also GUI Releases ). As both IDEs require CommonBuildNextGeneration (CBNG) to resolve dependencies and make releases, one should either run these from somewhere in the Technical Network (e.g. from the dev-server ) or mount the required paths via sshfs as described here .","title":"IDE Setup"},{"location":"guis/kmod/ide_install/#installation","text":"Eclipse Download your preferred version from their download page and install. With this version, CBNG comes automatically installed and can be used by simply dragging the desired project into the CBNG window . For more info see the accsoft eclipse wiki . IntelliJ IDEA Download your preferred version from their download page and install. CBNG needs to be setup in IDEA manually, by setting the Gradle home path in: File -> Settings -> Build, Execution, Deployment -> Build Tools -> Gradle to the specified location /user/pcrops/devtools/CBNG/PRO/ A more extensive guide can be found in the CBNG Wiki for IDEA integration . Alternatively, run CBNG directly from the commandline instead. CBNG from the Command Line Another sometimes easier alternative that works with any IDE is to run CBNGs bob with the desired command (e.g. build , dependencies , eclipse , idea ) in the folder of the project from the commandline. The full path to bob is: /user/pcrops/devtools/CBNG/PRO/bin/bob See bob --help for instructions about its commands.","title":"Installation"},{"location":"guis/kmod/ide_install/#importing-a-project","text":"The project can be imported using the git-integrations of the IDEs directly, using the Gitlab paths below. This should be straightforward, but you are giving up some control. In the next subsections the manual path of getting the source-code into the IDE is outlined in the hope to point to some pitfalls that may occur and how to avoid them. Firstly, you should clone the desired repository to an adequate location on your hard-drive, depending on which project you want to work on: Beta-Beat GUI git clone https://gitlab.cern.ch/acc-co/lhc/lhc-app-beta-beating Kmod GUI git clone https://gitlab.cern.ch/acc-co/lhc/lhc-app-kmod You then simply import the project into your IDE. IntelliJ Specificity For IntelliJ, you might have to Create an empty build.gradle file if you want to trigger a gradle import dialogue where you need to choose use local gradle distribution and set the gradle home to /user/pcrops/devtools/CBNG/PRO/bin/bob ( as above ) Go to File -> Project Structure ... -> Modules and set the Dependencies storage format to Eclipse (.classpath) . This one you should check on a regular basis, as it tends to reset itself. To make it runnable, you will have to use CBNG to resolve dependencies and build the project first. Depending on your IDE you should run CBNGs eclipse or idea followed by build . Running dependencies can help. No one in the OMC-Team is a CBNG expert, and sometimes running these commands leads to the desired outcome (of a runnable project) or not depending on the color of the DG 's clothing.","title":"Importing a Project"},{"location":"guis/kmod/ide_install/#running-the-gui","text":"If everything worked fine, the Gui should now be runnable via the void main() function in the main.Main.java , which can be invoked by right-clicking on main.Main and choosing Run or manually setting a Java Run configuration in the Run menu.","title":"Running the GUI"},{"location":"guis/kmod/ide_install/#useful-links","text":"CBNG Wiki Accsoft-Eclipse Downloads Accsoft Eclipse Wiki","title":"Useful Links"},{"location":"guis/kmod/individual_modulation/","text":"Performing Individual Magnet Modulation \u00b6 The Kmod GUI also allows for a modulation of a given magnet circuit. This is used for example for the quadrupoles in the matching section of the experimental insertions, or in the RF insertion, where one circuits corresponds to one quadrupole. The Kmodulation data can then be used to extract the beta-functions at instruments (e.g. BSRT ) between the quadrupoles. As of 2018, the instruments for which the measured beta-function has been used for calibration are the Wirescanner ( BWS.5 ) and the undulator ( MU.B5 ) or dipole D3 ( MBRS.5 ) for the BSRT . All these instruments are located between Q5R and Q5L . Additionally, in beam 2, between MQM.7L4.B2 and MQY.6L4.B2 the BGV demonstrator is located ( B7L4.B2 ). Circuit Selection \u00b6 The first step is to select a magnet circuit to use. You can do so under Parameter Selection -> Select Quadrupole . The circuit corresponding to the quadrupole to be modulated has to be selected on the right hand side of the panel and added via the add quadrupole button to the left hand side. As example for the naming convention, the circuit RQ5/.R4B2/K1 corresponds to the MQY.5R4.B2 in the LHC sequence file. Under Trim Function , select Sine Function before continuing. Todo Include screenshot of circuit selection Trim Start \u00b6 The trim current, frequency, and number of cycles should be entered on the right hand side of the window and need to be set via the apply settings button. Normal values for trim I in IR4 are 2A at injection for the Q5 and 12A at 6.5 TeV for the Q5 . Values for other magnets can be found in the elogbook in the shifts logs of the 28/04/2018 and 07/10/2016 . Data acquisition is started with the Start Acquiring button, following by starting the trim with the Start trim button. After the trim is finished, acquisition of data needs to be stopped using the Stop Acquiring button. Todo Include screenshot of trim start Warning The start and end time should be noted down in the elogbook for later data extraction, as no automatic extraction like in the IP modulation case exists. Trim Extraction \u00b6 After acquisition during a trim, data can then be extracted by selecting the circuit in the Select Quadrupole panel under Parameter selection and pushing the extract previous trim button. The trim start and end times as well as the beam energy need to be entered. In the following panel, the trim data can then be saved via the Save magnet measurement button. Todo Include screenshot of trim extraction The analysis of the extracted Kmod data is described in the next section .","title":"Magnet Modulation"},{"location":"guis/kmod/individual_modulation/#performing-individual-magnet-modulation","text":"The Kmod GUI also allows for a modulation of a given magnet circuit. This is used for example for the quadrupoles in the matching section of the experimental insertions, or in the RF insertion, where one circuits corresponds to one quadrupole. The Kmodulation data can then be used to extract the beta-functions at instruments (e.g. BSRT ) between the quadrupoles. As of 2018, the instruments for which the measured beta-function has been used for calibration are the Wirescanner ( BWS.5 ) and the undulator ( MU.B5 ) or dipole D3 ( MBRS.5 ) for the BSRT . All these instruments are located between Q5R and Q5L . Additionally, in beam 2, between MQM.7L4.B2 and MQY.6L4.B2 the BGV demonstrator is located ( B7L4.B2 ).","title":"Performing Individual Magnet Modulation"},{"location":"guis/kmod/individual_modulation/#circuit-selection","text":"The first step is to select a magnet circuit to use. You can do so under Parameter Selection -> Select Quadrupole . The circuit corresponding to the quadrupole to be modulated has to be selected on the right hand side of the panel and added via the add quadrupole button to the left hand side. As example for the naming convention, the circuit RQ5/.R4B2/K1 corresponds to the MQY.5R4.B2 in the LHC sequence file. Under Trim Function , select Sine Function before continuing. Todo Include screenshot of circuit selection","title":"Circuit Selection"},{"location":"guis/kmod/individual_modulation/#trim-start","text":"The trim current, frequency, and number of cycles should be entered on the right hand side of the window and need to be set via the apply settings button. Normal values for trim I in IR4 are 2A at injection for the Q5 and 12A at 6.5 TeV for the Q5 . Values for other magnets can be found in the elogbook in the shifts logs of the 28/04/2018 and 07/10/2016 . Data acquisition is started with the Start Acquiring button, following by starting the trim with the Start trim button. After the trim is finished, acquisition of data needs to be stopped using the Stop Acquiring button. Todo Include screenshot of trim start Warning The start and end time should be noted down in the elogbook for later data extraction, as no automatic extraction like in the IP modulation case exists.","title":"Trim Start"},{"location":"guis/kmod/individual_modulation/#trim-extraction","text":"After acquisition during a trim, data can then be extracted by selecting the circuit in the Select Quadrupole panel under Parameter selection and pushing the extract previous trim button. The trim start and end times as well as the beam energy need to be entered. In the following panel, the trim data can then be saved via the Save magnet measurement button. Todo Include screenshot of trim extraction The analysis of the extracted Kmod data is described in the next section .","title":"Trim Extraction"},{"location":"guis/kmod/releases/","text":"Software Releases \u00b6","title":"Releases"},{"location":"guis/kmod/releases/#software-releases","text":"","title":"Software Releases"},{"location":"guis/kmod/running/","text":"Running the Kmod GUI \u00b6 Running Locally \u00b6 The GUI requires to be on the Technical Network, to which the CERN Control Center is connected. If you are in the GPN but not on the Technical Network, you will need to VPN through some machines to be able to run KMOD , as it needs to connect to LSA . First, install the program sshuttle , which should be available in your package manager. Then, run this command in a terminal and leave it open: sshuttle -vr <username>@cs-ccr-dev2 172 .18.0.0/16 All traffic related to the technical network will be redirected through the cs-ccr-dev2 machine which has access to both networks. In case it isn't available, the other cs-ccr-devX machines can be used. Loading a model \u00b6 You can load the model created from the Beta-Beat GUI or Multiturn GUI for each beam by pressing the load model button. Select the desired model directory in the popup dialog and confirm by pressing the open button. If everything worked fine and the specified folder contains the needed twiss_elements file, the GUI will display the model's name. You can choose another model directory by pressing on the update model button which appears if a model is already selected. The model data is used for preset values in the GUI and the orbit-offset script needs the model for its calculations. Todo Include up-to-date screenshots of model loading, see https://twiki.cern.ch/twiki/bin/view/BEABP/BasicOptions Setting the Beta-Beat.src directory To change the setting of the used Beta-Beat.src directory, navigate to File -> Set Beta-Beat dir and select the location where the Beta-Beat.src directory to be used is located. The Kmod GUI will automatically take the proper Python scripts from this directory. This is automatically reset to the standard directory /afs/cern.ch/eng/sl/lintrack/Beta-Beat.src/ . The GUI will check if the Beta-Beat.src directory contains the ProgramVersions.properties file, which is needed for calling an external python script. You can change the standard directory by creating a user.properties file in the project folder. The kmod GUI will automatically read this file and change the Beta-Beat.src directory to this new value. This file must contain BetaBeatDir=[newBBdir] (replace the placeholder correctly).","title":"Basics"},{"location":"guis/kmod/running/#running-the-kmod-gui","text":"","title":"Running the Kmod GUI"},{"location":"guis/kmod/running/#running-locally","text":"The GUI requires to be on the Technical Network, to which the CERN Control Center is connected. If you are in the GPN but not on the Technical Network, you will need to VPN through some machines to be able to run KMOD , as it needs to connect to LSA . First, install the program sshuttle , which should be available in your package manager. Then, run this command in a terminal and leave it open: sshuttle -vr <username>@cs-ccr-dev2 172 .18.0.0/16 All traffic related to the technical network will be redirected through the cs-ccr-dev2 machine which has access to both networks. In case it isn't available, the other cs-ccr-devX machines can be used.","title":"Running Locally"},{"location":"guis/kmod/running/#loading-a-model","text":"You can load the model created from the Beta-Beat GUI or Multiturn GUI for each beam by pressing the load model button. Select the desired model directory in the popup dialog and confirm by pressing the open button. If everything worked fine and the specified folder contains the needed twiss_elements file, the GUI will display the model's name. You can choose another model directory by pressing on the update model button which appears if a model is already selected. The model data is used for preset values in the GUI and the orbit-offset script needs the model for its calculations. Todo Include up-to-date screenshots of model loading, see https://twiki.cern.ch/twiki/bin/view/BEABP/BasicOptions Setting the Beta-Beat.src directory To change the setting of the used Beta-Beat.src directory, navigate to File -> Set Beta-Beat dir and select the location where the Beta-Beat.src directory to be used is located. The Kmod GUI will automatically take the proper Python scripts from this directory. This is automatically reset to the standard directory /afs/cern.ch/eng/sl/lintrack/Beta-Beat.src/ . The GUI will check if the Beta-Beat.src directory contains the ProgramVersions.properties file, which is needed for calling an external python script. You can change the standard directory by creating a user.properties file in the project folder. The kmod GUI will automatically read this file and change the Beta-Beat.src directory to this new value. This file must contain BetaBeatDir=[newBBdir] (replace the placeholder correctly).","title":"Loading a model"},{"location":"guis/kmod/trim_analysis/","text":"Analyzing Trim Data \u00b6 The Kmod GUI provides functionality to load previously recorded trim data and perform a k-modulation analysis of the results. The steps are described below. Extract Trim Panel \u00b6 If you want to extract data from a previous trim, press on the Extract Previous Trim button. Input the right energy value for this trim in the top right input field and press the Select trim or the Last Trim button. Just ignore the rest (TODO: why???) The Select trim button will open the trim selection panel and the Last trim button will just load the last trim entry from Timber. Todo Include screenshot of trim data extraction If you chose Select trim , then select the desired IP then navigate othe desired date and confirm with pressing on the green Select trim button. You can switch between different IPs and dates by using the combo boxes. Todo Include screenshot of trim selection Measurement View Dialog \u00b6 The selected/loaded trim will then be displayed in the Measurement View Dialog , from which you can analyze the trim data with different options. To get beta star values, press the Analyze Trim button , then in the next dialog select the directory in which to save the trim data and the results. You will need to input the estimated beta star in the horizontal and vertical planes as well as the waist shift for each beam. The values are loaded from the model files. If no model is loaded, you have to input those values. The (old) python code of this script can be found here . The results are stored in the file named beta_star.out . Todo Include screenshots of measurement view dialog Special Case: Individual Magnet Modulation If individual circuits/magnets have been modulated, the analysis cannot (yet) be triggered from the GUI. Instead, the gui2kmod.py script has to be called from the command line. For the input arguments, the working directory ( --working_directory ) should point to a folder where the extracted data of both modulated quadrupoles is present and the --circuit option should be selected, followed by the two circuit names. The initial guesses should be set to a large beta function and waist (e.g. --BetastarAndWaist 200,-100 ) to speed up the convergence. An example script call would look as follow: gui2kmod.py --circuit rq5.l4b1,rq5.r4b1 --beam b1 --BetastarAndWaist 200 ,-100 --instruments MONITOR,RBEND,INSTRUMENT,TKICKER --working_directory /path/to/data Results are then saved in the working directory in a folder with the magnet names. Todo I think Hector took care of Kmod analysis for omc3 so maybe the above tip section should point to the newest codes?","title":"Analyzing Trim Data"},{"location":"guis/kmod/trim_analysis/#analyzing-trim-data","text":"The Kmod GUI provides functionality to load previously recorded trim data and perform a k-modulation analysis of the results. The steps are described below.","title":"Analyzing Trim Data"},{"location":"guis/kmod/trim_analysis/#extract-trim-panel","text":"If you want to extract data from a previous trim, press on the Extract Previous Trim button. Input the right energy value for this trim in the top right input field and press the Select trim or the Last Trim button. Just ignore the rest (TODO: why???) The Select trim button will open the trim selection panel and the Last trim button will just load the last trim entry from Timber. Todo Include screenshot of trim data extraction If you chose Select trim , then select the desired IP then navigate othe desired date and confirm with pressing on the green Select trim button. You can switch between different IPs and dates by using the combo boxes. Todo Include screenshot of trim selection","title":"Extract Trim Panel"},{"location":"guis/kmod/trim_analysis/#measurement-view-dialog","text":"The selected/loaded trim will then be displayed in the Measurement View Dialog , from which you can analyze the trim data with different options. To get beta star values, press the Analyze Trim button , then in the next dialog select the directory in which to save the trim data and the results. You will need to input the estimated beta star in the horizontal and vertical planes as well as the waist shift for each beam. The values are loaded from the model files. If no model is loaded, you have to input those values. The (old) python code of this script can be found here . The results are stored in the file named beta_star.out . Todo Include screenshots of measurement view dialog Special Case: Individual Magnet Modulation If individual circuits/magnets have been modulated, the analysis cannot (yet) be triggered from the GUI. Instead, the gui2kmod.py script has to be called from the command line. For the input arguments, the working directory ( --working_directory ) should point to a folder where the extracted data of both modulated quadrupoles is present and the --circuit option should be selected, followed by the two circuit names. The initial guesses should be set to a large beta function and waist (e.g. --BetastarAndWaist 200,-100 ) to speed up the convergence. An example script call would look as follow: gui2kmod.py --circuit rq5.l4b1,rq5.r4b1 --beam b1 --BetastarAndWaist 200 ,-100 --instruments MONITOR,RBEND,INSTRUMENT,TKICKER --working_directory /path/to/data Results are then saved in the working directory in a folder with the magnet names. Todo I think Hector took care of Kmod analysis for omc3 so maybe the above tip section should point to the newest codes?","title":"Measurement View Dialog"},{"location":"guis/multiturn/gui/","text":"The Multiturn GUI \u00b6","title":"The Multiturn GUI"},{"location":"guis/multiturn/gui/#the-multiturn-gui","text":"","title":"The Multiturn GUI"},{"location":"guis/multiturn/running/","text":"","title":"Running the GUI"},{"location":"omc_team/ideas/","text":"Ideas \u00b6 Run 3 MDs Ideas \u00b6 Linear Optics Related \u00b6 2 New ballistic optics flavors: Telescopic for tune jitter measurements with enhanced arcs. Ballistic with large vertical dispersion. Half integer tune. 60 degress arc cell phase advance for HE-LHC (or \u2153 HE-LHC). Experience HL-LHC-like injection optics with beta*=6m (pilots only). Look at 11 T flux jumps with TbT data, possibly using a new optics with enhanced beta functions. 2 possible experiments with TOTEM to understand the assymetry of the local dispersion in IR5: Measurements with flat orbit, >60 bunches. Measurements with ballistic optics. Non-90 degrees arc cell phase advance to ease correction of errors in the arcs (reduce the knob degeneracy of orbit bumps at sextupoles). Coupling Related \u00b6 Switching off MCS and main sextupoles in one arc to evaluate possible (systematic) vertical or horizontal misalignment of dipoles by measuring coupling and beta-beating during the b3 decay. In a previous MD there was a quadratic coupling increase due to the orbit bump in the arc (maybe the one without MS, tbc). Crazy MD for this, could be shifting the edge of some dipoles up to see change in coupling. Tilting a triplet quadrupole to check validity of the tilt measurement (with and/or without beam). BPM related \u00b6 Measure bad BPMs with low and high intensities to detect possible issues with the comparator (transistor). Also swap connections between good and bad BPM to identified. Have one BPM unplugged to detect its noise until next technical stop. Momentum compaction factor from Qs versus Voltage. Snap-back with forced 3D oscillations (optics, chroma,...). Maybe not OMC: 24h pilot at top energy to use damped beam for BSRT resolution measurement. 0.5 um bunch from new injector chain?? Good for optics measurements, BSRT calibration etc. K-mod related \u00b6 K-Modulation with Xing angle and OFB off for Leon's Xing angle reconstruction. Arc K-modulation. K-modulation in IR4 during the energy ramp. Reduce to one the DCCTs per circuit with pilot in the machine and ATS optics to see the impact of 2 DCCTs. Michele Martino also proposes increasing in 1ppm the noise of the DCCTs in one or all dipole PCs to see impact on tune jitter. Non-Linear Optics Related \u00b6 Commissioning?: Measure amplitude detuning coming from CMS solenoid by having the on and off measurements. IR non-linear corrector offsets measurement. Emittance growth from octupoles and chroma. Amplitude detuning measurement versus crossing angle with b6 corrector on, for 5 crossing angles to evaluate performance of the technique for b6 correction. Amplitude dependent optics: Dedicated settings at injection as PoP (Thomas & Barbara), alternative techniques in parallel (K-modulation with decohered beams and amplitude dependent segment-by-segment). IR2 non-linear correction -> Dedicated squeeze for IR2 to allow for good triplet characterizaton to shed light on b4. Amplitude detuning in ballistic optics. ADT for single kicks. b5 RDTs. Measurement and correction of a3 RDTs at injection for lifetime optimization (correcting with MSSX and MSS). Reduce RF voltage to decrease synchrotron tune to limit the emittance blow-up during excitation with driven and natural tunes close to each other.","title":"Future MD Ideas"},{"location":"omc_team/ideas/#ideas","text":"","title":"Ideas"},{"location":"omc_team/ideas/#run-3-mds-ideas","text":"","title":"Run 3 MDs Ideas"},{"location":"omc_team/ideas/#linear-optics-related","text":"2 New ballistic optics flavors: Telescopic for tune jitter measurements with enhanced arcs. Ballistic with large vertical dispersion. Half integer tune. 60 degress arc cell phase advance for HE-LHC (or \u2153 HE-LHC). Experience HL-LHC-like injection optics with beta*=6m (pilots only). Look at 11 T flux jumps with TbT data, possibly using a new optics with enhanced beta functions. 2 possible experiments with TOTEM to understand the assymetry of the local dispersion in IR5: Measurements with flat orbit, >60 bunches. Measurements with ballistic optics. Non-90 degrees arc cell phase advance to ease correction of errors in the arcs (reduce the knob degeneracy of orbit bumps at sextupoles).","title":"Linear Optics Related"},{"location":"omc_team/ideas/#coupling-related","text":"Switching off MCS and main sextupoles in one arc to evaluate possible (systematic) vertical or horizontal misalignment of dipoles by measuring coupling and beta-beating during the b3 decay. In a previous MD there was a quadratic coupling increase due to the orbit bump in the arc (maybe the one without MS, tbc). Crazy MD for this, could be shifting the edge of some dipoles up to see change in coupling. Tilting a triplet quadrupole to check validity of the tilt measurement (with and/or without beam).","title":"Coupling Related"},{"location":"omc_team/ideas/#bpm-related","text":"Measure bad BPMs with low and high intensities to detect possible issues with the comparator (transistor). Also swap connections between good and bad BPM to identified. Have one BPM unplugged to detect its noise until next technical stop. Momentum compaction factor from Qs versus Voltage. Snap-back with forced 3D oscillations (optics, chroma,...). Maybe not OMC: 24h pilot at top energy to use damped beam for BSRT resolution measurement. 0.5 um bunch from new injector chain?? Good for optics measurements, BSRT calibration etc.","title":"BPM related"},{"location":"omc_team/ideas/#k-mod-related","text":"K-Modulation with Xing angle and OFB off for Leon's Xing angle reconstruction. Arc K-modulation. K-modulation in IR4 during the energy ramp. Reduce to one the DCCTs per circuit with pilot in the machine and ATS optics to see the impact of 2 DCCTs. Michele Martino also proposes increasing in 1ppm the noise of the DCCTs in one or all dipole PCs to see impact on tune jitter.","title":"K-mod related"},{"location":"omc_team/ideas/#non-linear-optics-related","text":"Commissioning?: Measure amplitude detuning coming from CMS solenoid by having the on and off measurements. IR non-linear corrector offsets measurement. Emittance growth from octupoles and chroma. Amplitude detuning measurement versus crossing angle with b6 corrector on, for 5 crossing angles to evaluate performance of the technique for b6 correction. Amplitude dependent optics: Dedicated settings at injection as PoP (Thomas & Barbara), alternative techniques in parallel (K-modulation with decohered beams and amplitude dependent segment-by-segment). IR2 non-linear correction -> Dedicated squeeze for IR2 to allow for good triplet characterizaton to shed light on b4. Amplitude detuning in ballistic optics. ADT for single kicks. b5 RDTs. Measurement and correction of a3 RDTs at injection for lifetime optimization (correcting with MSSX and MSS). Reduce RF voltage to decrease synchrotron tune to limit the emittance blow-up during excitation with driven and natural tunes close to each other.","title":"Non-Linear Optics Related"},{"location":"omc_team/methods/","text":"OMC Methods \u00b6 Note Very long content about the physics and practice of OMC methods + paper references for each (K-mod, 3D kicks, N-BPM...). Each method should be a H2, see examples below. N-BPM \u00b6 K-Modulation \u00b6 3D Kicks \u00b6","title":"OMC Methods"},{"location":"omc_team/methods/#omc-methods","text":"Note Very long content about the physics and practice of OMC methods + paper references for each (K-mod, 3D kicks, N-BPM...). Each method should be a H2, see examples below.","title":"OMC Methods"},{"location":"omc_team/methods/#n-bpm","text":"","title":"N-BPM"},{"location":"omc_team/methods/#k-modulation","text":"","title":"K-Modulation"},{"location":"omc_team/methods/#3d-kicks","text":"","title":"3D Kicks"},{"location":"omc_team/physics/","text":"The Pysics of OMC \u00b6 Note Long and detailed note of the kind of accelerator physcis that OMC takes care of. Includes the prerequisites of accelerator physics necessary to do OMC work / understand OMC methods. See example headers below. Basics of Accelerator Physics \u00b6 LHC IR Linear Optics \u00b6 LHC IR NonLinear Optics \u00b6","title":"Physics of OMC"},{"location":"omc_team/physics/#the-pysics-of-omc","text":"Note Long and detailed note of the kind of accelerator physcis that OMC takes care of. Includes the prerequisites of accelerator physics necessary to do OMC work / understand OMC methods. See example headers below.","title":"The Pysics of OMC"},{"location":"omc_team/physics/#basics-of-accelerator-physics","text":"","title":"Basics of Accelerator Physics"},{"location":"omc_team/physics/#lhc-ir-linear-optics","text":"","title":"LHC IR Linear Optics"},{"location":"omc_team/physics/#lhc-ir-nonlinear-optics","text":"","title":"LHC IR NonLinear Optics"},{"location":"omc_team/publications/","text":"OMC Publications \u00b6 Note Self-explanatory, see maybe ResearchGate and Roro's website for starters? Make each publication a collapsible note, with title + authors + link in the headers and BibTeX in the body. See example below. Journal Publications \u00b6 2020 \u00b6 Detection of faulty beam position monitors using unsupervised learning, E. Fol, R. Tom\u00e1s, J. Coello de Portugal, and G. Franchetti Phys. Rev. Accel. Beams 23, 102805, 2020 @article{faulty_bpm_detection, title = {Detection of faulty beam position monitors using unsupervised learning}, author = {Fol, E. and Tom\\'as, R. and Coello de Portugal, J. and Franchetti, G.}, journal = {Phys. Rev. Accel. Beams}, volume = {23}, issue = {10}, pages = {102805}, numpages = {10}, year = {2020}, month = {Oct}, publisher = {American Physical Society}, doi = {10.1103/PhysRevAccelBeams.23.102805}, url = {https://link.aps.org/doi/10.1103/PhysRevAccelBeams.23.102805} } 2019 \u00b6 2018 \u00b6 Strategy Reports \u00b6 MD Notes \u00b6 2020 \u00b6 2019 \u00b6 2018 \u00b6","title":"Publications"},{"location":"omc_team/publications/#omc-publications","text":"Note Self-explanatory, see maybe ResearchGate and Roro's website for starters? Make each publication a collapsible note, with title + authors + link in the headers and BibTeX in the body. See example below.","title":"OMC Publications"},{"location":"omc_team/publications/#journal-publications","text":"","title":"Journal Publications"},{"location":"omc_team/publications/#2020","text":"Detection of faulty beam position monitors using unsupervised learning, E. Fol, R. Tom\u00e1s, J. Coello de Portugal, and G. Franchetti Phys. Rev. Accel. Beams 23, 102805, 2020 @article{faulty_bpm_detection, title = {Detection of faulty beam position monitors using unsupervised learning}, author = {Fol, E. and Tom\\'as, R. and Coello de Portugal, J. and Franchetti, G.}, journal = {Phys. Rev. Accel. Beams}, volume = {23}, issue = {10}, pages = {102805}, numpages = {10}, year = {2020}, month = {Oct}, publisher = {American Physical Society}, doi = {10.1103/PhysRevAccelBeams.23.102805}, url = {https://link.aps.org/doi/10.1103/PhysRevAccelBeams.23.102805} }","title":"2020"},{"location":"omc_team/publications/#2019","text":"","title":"2019"},{"location":"omc_team/publications/#2018","text":"","title":"2018"},{"location":"omc_team/publications/#strategy-reports","text":"","title":"Strategy Reports"},{"location":"omc_team/publications/#md-notes","text":"","title":"MD Notes"},{"location":"omc_team/publications/#2020_1","text":"","title":"2020"},{"location":"omc_team/publications/#2019_1","text":"","title":"2019"},{"location":"omc_team/publications/#2018_1","text":"","title":"2018"},{"location":"packages/about/","text":"Acts as a landing page so that the Python Packages tab doesn't land directly on omc3 content, which is counter-intuitive. Can have a short description of what the tab is about, that omc3 is our main analysis package and that we have other packages. Maybe a bullet list like in the BetaBeat GUI about page, with redirects to the proper pages, could be nice.","title":"The OMC Packages"},{"location":"packages/betabeatsrc/","text":"","title":"Beta-Beat.src"},{"location":"packages/development/","text":"Contributing to the PyLHC Packages \u00b6 Want to report a bug, request a feature or simply contribute some code? We welcome contributions, but before you do, please read the following guidelines. Submission context \u00b6 Got a question or problem? \u00b6 If you have questions on some of the packages' functionality, and the available documentation does not provide answers, you can submit them as new issues on GitHub. If you spot missing parts in the documentation, feel free to report it in an issue and open a Pull Request that fixes it. Found a bug? \u00b6 If you found a bug in the source code, you can help us by submitting a bug report in a new issue on GitHub. If you wish to contribute a solution, you can submit a Pull Request with a fix. However, before doing so, please read the submission guidelines bellow. Missing a feature? \u00b6 You can request a new feature by opening an issue on GitHub. If you would like to implement a new feature, please submit an issue with a proposal first, to be sure that it is necessary and appropriate to the package, and to discuss implementation details. This will also allow us to better coordinate our efforts, prevent duplication of work, and help you craft the change so that it is successfully accepted into the project. Our Availability Please note we are busy people and developping these packages is not our primary priority at work. We may take some time to reply. Submission guidelines \u00b6 Submitting an issue \u00b6 Before you submit an issue, please search the issue tracker, maybe an issue for your problem already exists and the discussion might inform you of fixes or workarounds readily available. If you are submitting a bug report, please also provide a minimal scenario to reproduce it. Submitting a Pull Request (PR) \u00b6 First, search GitHub for an open or closed PR that relates to your submission. If you do not find a related issue or PR, or if your PR is the implementation for an issue you open, go ahead. Development : Clone the project, set up your branch and development environment, make your changes, and add descriptive messages to your commits. Please reference the issue number in your commit header messages so that your commits appear on the issue tracker. Build : Before submitting changes, please make sure tests pass and that the package properly installs. Most projects come with a Makefile to help with this, and you can get an overview of the available targets with make help . Pull Request : After having worked on your changes and pushed them to Github, open a Pull Request to the master branch. Review and approval by at least one of our team members is required before accepting changes. If new changes are suggested, make the required updates and push the changes again. Please do not require a review until all the quality checks pass. Quality checks \u00b6 Unit and accuracy tests are run automatically through CI Github Actions . A README.md file in the .github/workflows directory details our CI jobs. Additional checks for code-complexity, design-rules, test-coverage and duplication are made through CodeClimate . Pull requests implementing functionality or fixes are merged into the master branch after passing CI, and a reviewer's approval. After your PR is accepted by a team member, please select squash and merge to merge into master. Afterwards, you can safely delete your branch and close the issue. Python Guidelines \u00b6 We strive to use a common codestyle for our software. Please follow these guidelines to keep code cohesion up, and git diffs down. In case you want to contribute to a package's development, you should install it in editable mode: git clone https://github.com/pylhc/package_name pip install --editable package_name Installing Extras You can install extra dependencies (as defined in setup.py ) suited to your use case with the following commands: pip install --editable package_name[test] pip install --editable package_name[test,doc] pip install --editable package_name[all] For development purposes, we recommend using the all extra to be fully set up. Naming Conventions \u00b6 Overall, please abide by PEP8 : Module, functions, methods, attributes and local variable names: use snake_case . Example: segment_by_segment.py , get_phase.py . Class names: use PascalCase . Example: FileWriter , FixedTfs . Module constants: Uppercase words divided by underscores. Example: INDEX_ID , DEFAULT_COLUMN_WIDTH . Private methods, functions and variables: see above, but precede the name by an underscore. Example: _validate_index_type , _get_header_line . Code Structure \u00b6 Make the code as readable as possible, both for collaborators and future you. Use descriptive variable names. Use descriptive function names. Type hint your code. Respect the max line length of 100 characters as much as possible. Divide code blocks into simple functions. Strive to write pure functions . Avoid code duplication. Respect the Zen of Python . We use PyCharm as IDE in the team. Docstrings Convention \u00b6 To be compatible with our automatic API documentation generator, please respect Sphinx conventions.","title":"Python Development"},{"location":"packages/development/#contributing-to-the-pylhc-packages","text":"Want to report a bug, request a feature or simply contribute some code? We welcome contributions, but before you do, please read the following guidelines.","title":"Contributing to the PyLHC Packages"},{"location":"packages/development/#submission-context","text":"","title":"Submission context"},{"location":"packages/development/#got-a-question-or-problem","text":"If you have questions on some of the packages' functionality, and the available documentation does not provide answers, you can submit them as new issues on GitHub. If you spot missing parts in the documentation, feel free to report it in an issue and open a Pull Request that fixes it.","title":"Got a question or problem?"},{"location":"packages/development/#found-a-bug","text":"If you found a bug in the source code, you can help us by submitting a bug report in a new issue on GitHub. If you wish to contribute a solution, you can submit a Pull Request with a fix. However, before doing so, please read the submission guidelines bellow.","title":"Found a bug?"},{"location":"packages/development/#missing-a-feature","text":"You can request a new feature by opening an issue on GitHub. If you would like to implement a new feature, please submit an issue with a proposal first, to be sure that it is necessary and appropriate to the package, and to discuss implementation details. This will also allow us to better coordinate our efforts, prevent duplication of work, and help you craft the change so that it is successfully accepted into the project. Our Availability Please note we are busy people and developping these packages is not our primary priority at work. We may take some time to reply.","title":"Missing a feature?"},{"location":"packages/development/#submission-guidelines","text":"","title":"Submission guidelines"},{"location":"packages/development/#submitting-an-issue","text":"Before you submit an issue, please search the issue tracker, maybe an issue for your problem already exists and the discussion might inform you of fixes or workarounds readily available. If you are submitting a bug report, please also provide a minimal scenario to reproduce it.","title":"Submitting an issue"},{"location":"packages/development/#submitting-a-pull-request-pr","text":"First, search GitHub for an open or closed PR that relates to your submission. If you do not find a related issue or PR, or if your PR is the implementation for an issue you open, go ahead. Development : Clone the project, set up your branch and development environment, make your changes, and add descriptive messages to your commits. Please reference the issue number in your commit header messages so that your commits appear on the issue tracker. Build : Before submitting changes, please make sure tests pass and that the package properly installs. Most projects come with a Makefile to help with this, and you can get an overview of the available targets with make help . Pull Request : After having worked on your changes and pushed them to Github, open a Pull Request to the master branch. Review and approval by at least one of our team members is required before accepting changes. If new changes are suggested, make the required updates and push the changes again. Please do not require a review until all the quality checks pass.","title":"Submitting a Pull Request (PR)"},{"location":"packages/development/#quality-checks","text":"Unit and accuracy tests are run automatically through CI Github Actions . A README.md file in the .github/workflows directory details our CI jobs. Additional checks for code-complexity, design-rules, test-coverage and duplication are made through CodeClimate . Pull requests implementing functionality or fixes are merged into the master branch after passing CI, and a reviewer's approval. After your PR is accepted by a team member, please select squash and merge to merge into master. Afterwards, you can safely delete your branch and close the issue.","title":"Quality checks"},{"location":"packages/development/#python-guidelines","text":"We strive to use a common codestyle for our software. Please follow these guidelines to keep code cohesion up, and git diffs down. In case you want to contribute to a package's development, you should install it in editable mode: git clone https://github.com/pylhc/package_name pip install --editable package_name Installing Extras You can install extra dependencies (as defined in setup.py ) suited to your use case with the following commands: pip install --editable package_name[test] pip install --editable package_name[test,doc] pip install --editable package_name[all] For development purposes, we recommend using the all extra to be fully set up.","title":"Python Guidelines"},{"location":"packages/development/#naming-conventions","text":"Overall, please abide by PEP8 : Module, functions, methods, attributes and local variable names: use snake_case . Example: segment_by_segment.py , get_phase.py . Class names: use PascalCase . Example: FileWriter , FixedTfs . Module constants: Uppercase words divided by underscores. Example: INDEX_ID , DEFAULT_COLUMN_WIDTH . Private methods, functions and variables: see above, but precede the name by an underscore. Example: _validate_index_type , _get_header_line .","title":"Naming Conventions"},{"location":"packages/development/#code-structure","text":"Make the code as readable as possible, both for collaborators and future you. Use descriptive variable names. Use descriptive function names. Type hint your code. Respect the max line length of 100 characters as much as possible. Divide code blocks into simple functions. Strive to write pure functions . Avoid code duplication. Respect the Zen of Python . We use PyCharm as IDE in the team.","title":"Code Structure"},{"location":"packages/development/#docstrings-convention","text":"To be compatible with our automatic API documentation generator, please respect Sphinx conventions.","title":"Docstrings Convention"},{"location":"packages/generic_parser/","text":"The generic_parser package \u00b6","title":"generic_parser"},{"location":"packages/generic_parser/#the-generic_parser-package","text":"","title":"The generic_parser package"},{"location":"packages/mess/","text":"Question Should we include this here or in OMC tabs, as a resource?","title":"MESS"},{"location":"packages/pylhc/","text":"","title":"PyLHC"},{"location":"packages/sdds/","text":"","title":"sdds"},{"location":"packages/tfs-pandas/","text":"","title":"tfs-pandas"},{"location":"packages/omc3/about/","text":"The OMC3 Software Documentation \u00b6 The omc3 package is the python tool of the Optics Measurements and Corrections team at CERN. The omc3 repository is the new version of our codes, refactored and rewritten for Python 3.7+ . This section acts as a general documentation and guide to using the omc3 package. The package's source can be found on Github and its API documentation can be found at the following link . What to expect \u00b6 The omc3 package serves the following purposes: Providing an all-in-one package for frequency analysis and optics measurements and corrections algorithms in particle accelerators. Providing an easily callable entrypoint to run your analytics from measurement / simulation files. Providing a convenient wrapper to effortlessly run MAD-X jobs. For detailed instructions see the getting started guide . Changelog \u00b6 A changelog file is made available in the Github repository, at the following link . License \u00b6 This software is licensed under the GNU GPLv3 License, see License . Authors \u00b6 This work is the result of combined efforts by members of the pylhc/omc-team working group. Contributions are welcome, but tightly controlled, see the guidelines page.","title":"About omc3"},{"location":"packages/omc3/about/#the-omc3-software-documentation","text":"The omc3 package is the python tool of the Optics Measurements and Corrections team at CERN. The omc3 repository is the new version of our codes, refactored and rewritten for Python 3.7+ . This section acts as a general documentation and guide to using the omc3 package. The package's source can be found on Github and its API documentation can be found at the following link .","title":"The OMC3 Software Documentation"},{"location":"packages/omc3/about/#what-to-expect","text":"The omc3 package serves the following purposes: Providing an all-in-one package for frequency analysis and optics measurements and corrections algorithms in particle accelerators. Providing an easily callable entrypoint to run your analytics from measurement / simulation files. Providing a convenient wrapper to effortlessly run MAD-X jobs. For detailed instructions see the getting started guide .","title":"What to expect"},{"location":"packages/omc3/about/#changelog","text":"A changelog file is made available in the Github repository, at the following link .","title":"Changelog"},{"location":"packages/omc3/about/#license","text":"This software is licensed under the GNU GPLv3 License, see License .","title":"License"},{"location":"packages/omc3/about/#authors","text":"This work is the result of combined efforts by members of the pylhc/omc-team working group. Contributions are welcome, but tightly controlled, see the guidelines page.","title":"Authors"},{"location":"packages/omc3/getting_started/","text":"Getting Started with OMC3 \u00b6 Quick start \u00b6 The omc3 package is Python 3.7+ compatible, but not yet deployed to PyPI. The best way to install is though pip and VCS: git clone https://github.com/pylhc/omc3 pip install /path/to/omc3 Or simply from the online master branch, which is stable: pip install git+https://github.com/pylhc/omc3.git After installing, codes can be run with either python -m omc3.SCRIPT --FLAG ARGUMENT or calling path to the .py file directly. Functionality \u00b6 Main Scripts \u00b6 Main scripts to be executed lie in the [ /omc3 ] module directly. These include: - hole_in_one.py to perform frequency analysis on turn by turn BPM data and infer optics (and more) for a given accelerator. - madx_wrapper.py to start a MAD-X run with a file or string as input. - model_creator.py to provide optics models required for optics analysis. - run_kmod.py to analyse data from K-modulation and return the measured optics functions. - tbt_converter.py to convert different turn by turn datatypes to sdds, and add noise. - amplitude_detuning_analysis.py to perform amp. det. analysis on optics data with tune correction. Plotting Scripts \u00b6 Plotting scripts for analysis outputs can be found in the /omc3/plotting submodule: - plot_spectrum.py to generate plots from files generated by frequency analysis. - plot_bbq.py to generate plots from files generated by BBQ analysis. - plot_amplitude_detuning.py to generate plots from files generated by amplitude detuning analysis. - plot_optics_measurements.py to generate plots from files generated by optics_measurements. - plot_tfs.py all purpose tfs-file plotter. Other Scripts \u00b6 Other general utility scripts are in /omc3/scripts module: - update_nattune_in_linfile.py to update the natural tune columns in the lin files by finding the highest peak in the spectrum in a given interval. - write_madx_macros.py to generate MAD-X tracking macros with observation points from a twiss file. - merge_kmod_results.py to merge lsa_results files created by kmod, and add the luminosity imbalance if the 4 needed IP/Beam files combination are present. A typical analysis workflow with omc3 is described in the next page .","title":"Getting Started"},{"location":"packages/omc3/getting_started/#getting-started-with-omc3","text":"","title":"Getting Started with OMC3"},{"location":"packages/omc3/getting_started/#quick-start","text":"The omc3 package is Python 3.7+ compatible, but not yet deployed to PyPI. The best way to install is though pip and VCS: git clone https://github.com/pylhc/omc3 pip install /path/to/omc3 Or simply from the online master branch, which is stable: pip install git+https://github.com/pylhc/omc3.git After installing, codes can be run with either python -m omc3.SCRIPT --FLAG ARGUMENT or calling path to the .py file directly.","title":"Quick start"},{"location":"packages/omc3/getting_started/#functionality","text":"","title":"Functionality"},{"location":"packages/omc3/getting_started/#main-scripts","text":"Main scripts to be executed lie in the [ /omc3 ] module directly. These include: - hole_in_one.py to perform frequency analysis on turn by turn BPM data and infer optics (and more) for a given accelerator. - madx_wrapper.py to start a MAD-X run with a file or string as input. - model_creator.py to provide optics models required for optics analysis. - run_kmod.py to analyse data from K-modulation and return the measured optics functions. - tbt_converter.py to convert different turn by turn datatypes to sdds, and add noise. - amplitude_detuning_analysis.py to perform amp. det. analysis on optics data with tune correction.","title":"Main Scripts"},{"location":"packages/omc3/getting_started/#plotting-scripts","text":"Plotting scripts for analysis outputs can be found in the /omc3/plotting submodule: - plot_spectrum.py to generate plots from files generated by frequency analysis. - plot_bbq.py to generate plots from files generated by BBQ analysis. - plot_amplitude_detuning.py to generate plots from files generated by amplitude detuning analysis. - plot_optics_measurements.py to generate plots from files generated by optics_measurements. - plot_tfs.py all purpose tfs-file plotter.","title":"Plotting Scripts"},{"location":"packages/omc3/getting_started/#other-scripts","text":"Other general utility scripts are in /omc3/scripts module: - update_nattune_in_linfile.py to update the natural tune columns in the lin files by finding the highest peak in the spectrum in a given interval. - write_madx_macros.py to generate MAD-X tracking macros with observation points from a twiss file. - merge_kmod_results.py to merge lsa_results files created by kmod, and add the luminosity imbalance if the 4 needed IP/Beam files combination are present. A typical analysis workflow with omc3 is described in the next page .","title":"Other Scripts"},{"location":"packages/omc3/know_how/","text":"Note Knowledge about omc3 details and ways to do things. Should include info on all functionality, plus answers to things we mention in meetings or Mattermost.","title":"Know-How"},{"location":"packages/omc3/workflow/","text":"OMC3 Sotfware Workflow \u00b6 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut aliquam id purus eu accumsan. Quisque metus dui, viverra in tortor tincidunt, laoreet fermentum risus. Etiam gravida orci non dolor tristique consectetur. Mauris aliquet dui sit amet velit tempor finibus. Aliquam non ullamcorper neque. Praesent aliquam magna eros, quis rutrum sapien scelerisque non. Vestibulum ipsum ipsum, placerat non ornare tincidunt, posuere feugiat odio. Nam ac leo odio. Cras rutrum sem sed sem faucibus, vitae rhoncus odio gravida. Nunc vestibulum nisl lorem, ac ornare nunc vulputate nec. Donec commodo lacus in mi facilisis, at semper ligula facilisis. Aliquam et augue scelerisque, elementum libero quis, tincidunt ligula.","title":"Workflow"},{"location":"packages/omc3/workflow/#omc3-sotfware-workflow","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut aliquam id purus eu accumsan. Quisque metus dui, viverra in tortor tincidunt, laoreet fermentum risus. Etiam gravida orci non dolor tristique consectetur. Mauris aliquet dui sit amet velit tempor finibus. Aliquam non ullamcorper neque. Praesent aliquam magna eros, quis rutrum sapien scelerisque non. Vestibulum ipsum ipsum, placerat non ornare tincidunt, posuere feugiat odio. Nam ac leo odio. Cras rutrum sem sed sem faucibus, vitae rhoncus odio gravida. Nunc vestibulum nisl lorem, ac ornare nunc vulputate nec. Donec commodo lacus in mi facilisis, at semper ligula facilisis. Aliquam et augue scelerisque, elementum libero quis, tincidunt ligula.","title":"OMC3 Sotfware Workflow"},{"location":"resources/faqs/","text":"Gradually include here different pieces of useful information, possibly from questions answered in meetings or on Mattermost, which don't really fit anywhere else","title":"FAQ"},{"location":"resources/links/","text":"Links to Various Useful Resources \u00b6 Hyperlinks Legend Publicly Accessible Page Webpage needs CERN login Only accessible from the CERN Network OMC \u00b6 OMC Mattermost Meetings (OMC Team Indico) Rogelio's Website GUI Links \u00b6 Beta-Beat Beta-Beat Gitlab Jira Bugtracker Artifactory Kmod Kmod Gitlab Artifactory Multiturn Multiturn Gitlab Artifactory Computer Setup at CERN \u00b6 Computing Accounts Management CERN Resources Portal AFS and Kerberos (for Ubuntu) AFS and Kerberos (for WSL) Using Kerberos for SSH Teleworking \u00b6 CodiMD CERN - Teleworking Tips & Tricks Cern Computing Blog - Useful tools for teleworking Remote Desktop Service (or with application, connect to cernts.cern.ch ) Computing setup for Members \u00b6 LHC Data Sources HTCondor Batch Docs Setup HTCondor for local use More HTCondor hints in the Python wrapper CERN \u00b6 Webtools \u00b6 Vistars HTCondor Grafana OP Webtools Page Timber INCA and LSA Applications LHC MD webpage Beam Performance Tracking Site SWAN (Jupyter Notebooks in CERN Cloud) CERN OpenStack (Virtual Machines in Cloud) Room Booking Info \u00b6 LHC Naming Conventions - Equipment Codes Beam-Beam and Luminosity Studies Accelerating Python Wiki CERN CBNG Manual LSA Wiki Repositories \u00b6 LHC Optics Repository CERN Optics Repository Development Guidelines and How-To's \u00b6 Markdown Cheatsheet Jira Text Formatting Notation Git \u00b6 Generating SSH keys for GitHub Git - configuration for symbolic links instead of files GitHub Flavored Markdown Python \u00b6 Python Style Guide Python docs Java \u00b6 Java Guidelines","title":"Useful Links"},{"location":"resources/links/#links-to-various-useful-resources","text":"Hyperlinks Legend Publicly Accessible Page Webpage needs CERN login Only accessible from the CERN Network","title":"Links to Various Useful Resources"},{"location":"resources/links/#omc","text":"OMC Mattermost Meetings (OMC Team Indico) Rogelio's Website","title":"OMC"},{"location":"resources/links/#gui-links","text":"Beta-Beat Beta-Beat Gitlab Jira Bugtracker Artifactory Kmod Kmod Gitlab Artifactory Multiturn Multiturn Gitlab Artifactory","title":"GUI Links"},{"location":"resources/links/#computer-setup-at-cern","text":"Computing Accounts Management CERN Resources Portal AFS and Kerberos (for Ubuntu) AFS and Kerberos (for WSL) Using Kerberos for SSH","title":"Computer Setup at CERN"},{"location":"resources/links/#teleworking","text":"CodiMD CERN - Teleworking Tips & Tricks Cern Computing Blog - Useful tools for teleworking Remote Desktop Service (or with application, connect to cernts.cern.ch )","title":"Teleworking"},{"location":"resources/links/#computing-setup-for-members","text":"LHC Data Sources HTCondor Batch Docs Setup HTCondor for local use More HTCondor hints in the Python wrapper","title":"Computing setup for Members"},{"location":"resources/links/#cern","text":"","title":"CERN"},{"location":"resources/links/#webtools","text":"Vistars HTCondor Grafana OP Webtools Page Timber INCA and LSA Applications LHC MD webpage Beam Performance Tracking Site SWAN (Jupyter Notebooks in CERN Cloud) CERN OpenStack (Virtual Machines in Cloud) Room Booking","title":"Webtools"},{"location":"resources/links/#info","text":"LHC Naming Conventions - Equipment Codes Beam-Beam and Luminosity Studies Accelerating Python Wiki CERN CBNG Manual LSA Wiki","title":"Info"},{"location":"resources/links/#repositories","text":"LHC Optics Repository CERN Optics Repository","title":"Repositories"},{"location":"resources/links/#development-guidelines-and-how-tos","text":"Markdown Cheatsheet Jira Text Formatting Notation","title":"Development Guidelines and How-To's"},{"location":"resources/links/#git","text":"Generating SSH keys for GitHub Git - configuration for symbolic links instead of files GitHub Flavored Markdown","title":"Git"},{"location":"resources/links/#python","text":"Python Style Guide Python docs","title":"Python"},{"location":"resources/links/#java","text":"Java Guidelines","title":"Java"},{"location":"resources/howto/setup/","text":"Useful Setup How-To's \u00b6 Mounting TN resources on GN machines \u00b6 To be able to run the GUI or CBNG seamlessly from computers which are not in the technical network, it might be useful to mount /user , /nfs and /eos via sshfs using the following recipe: Create mountpoints and symbolic links (only once) mkdir -p ~/mnt/user && ln -nfs ~/mnt/user /user mkdir ~/mnt/nfs && ln -nfs ~/mnt/nfs /nfs mkdir ~/mnt/eos && ln -nfs ~/mnt/eos /eos Mount network resources (repeat after timeouts and restarts) sshfs username@cs-ccr-dev3.cern.ch:/user/ ~/mnt/user sshfs username@cs-ccr-dev3.cern.ch:/nfs/ ~/mnt/nfs sshfs username@lxplus.cern.ch:/eos/ ~/mnt/eos If outside of GN , jump through lxplus to mount dev3 -folders: sshfs username@cs-ccr-dev3.cern.ch:/user/ ~/mnt/user -o ssh_command = 'ssh -t username@lxplus.cern.ch ssh' sshfs username@cs-ccr-dev3.cern.ch:/nfs/ ~/mnt/nfs -o ssh_command = 'ssh -t username@lxplus.cern.ch ssh' To avoid getting asked for your password all the time, you should have your ssh properly configured with kerberos. In case you need to unmount these sudo fusermount -u ~/mnt/user sudo fusermount -u ~/mnt/nfs sudo fusermount -u ~/mnt/eos","title":"Setup"},{"location":"resources/howto/setup/#useful-setup-how-tos","text":"","title":"Useful Setup How-To's"},{"location":"resources/howto/setup/#mounting-tn-resources-on-gn-machines","text":"To be able to run the GUI or CBNG seamlessly from computers which are not in the technical network, it might be useful to mount /user , /nfs and /eos via sshfs using the following recipe: Create mountpoints and symbolic links (only once) mkdir -p ~/mnt/user && ln -nfs ~/mnt/user /user mkdir ~/mnt/nfs && ln -nfs ~/mnt/nfs /nfs mkdir ~/mnt/eos && ln -nfs ~/mnt/eos /eos Mount network resources (repeat after timeouts and restarts) sshfs username@cs-ccr-dev3.cern.ch:/user/ ~/mnt/user sshfs username@cs-ccr-dev3.cern.ch:/nfs/ ~/mnt/nfs sshfs username@lxplus.cern.ch:/eos/ ~/mnt/eos If outside of GN , jump through lxplus to mount dev3 -folders: sshfs username@cs-ccr-dev3.cern.ch:/user/ ~/mnt/user -o ssh_command = 'ssh -t username@lxplus.cern.ch ssh' sshfs username@cs-ccr-dev3.cern.ch:/nfs/ ~/mnt/nfs -o ssh_command = 'ssh -t username@lxplus.cern.ch ssh' To avoid getting asked for your password all the time, you should have your ssh properly configured with kerberos. In case you need to unmount these sudo fusermount -u ~/mnt/user sudo fusermount -u ~/mnt/nfs sudo fusermount -u ~/mnt/eos","title":"Mounting TN resources on GN machines"},{"location":"resources/howto/teleworking/","text":"Resources to Ease Teleworking \u00b6 Accessing CERN-internal websites \u00b6 Adapted from here , you can create a web proxy: ssh -D 8090 username@lxtunnel.cern.ch The above command opens a tunnel at port 8090 which can be accessed via browser through localhost:8090 . Accessing Journal Papers etc. \u00b6 Lots of journals and resources can be accessed via the CERN ezproxy by prepending the viewing url with https://ezproxy.cern.ch/login?url= . See this website for a list. Running Graphical Software on lxplus or the TN (e.g. GUI, Eclipse) \u00b6 The most intuitive way to run graphical software on computers within the CERN network from your own PC would be connecting to them by ssh -X and control their GUI via the forwarded X-Server. While this usually works fine from within CERN itself, where connection speeds are high, depending on the ping and bandwidth of your local connection this can be a frustrating experience. Using RDP is a way to avoid this, as with this protocol the graphical interface is rendered locally and only the picture of the screen is transmitted. Sadly, the machine you want to work on ( dev-server , optics-server ) will not have this installed. However, cernts.cern.ch allows you to connect to a windows machine via Remote Desktop Connection from Windows, or e.g. Remmina from Linux. Once logged in with your CERN credentials (Add CERN.CH\\ in front of your username to specify your domain) you can run: Start \u2192 X-Win32 18 \u2192 Lxplus (Default) which opens a putty-terminal connected to lxplus and starts a X-Server in the background. Putty and XServer on cernts Executing any graphical software from this terminal will ask for connection authorization, which you need to approve. Approval prompt for a connection to XServer This way you can run any graphical application smoothly. If your internet connection fails, you should still be able to resume your current session, at least for a while. Creating Shortcut to Other Machines In order to connect to another machine directly (instead of hopping through lxplus ) you can create a shortcut: Open X-Win32 18 Configuration . Manual... \u2192 More... \u2192 command . Target: \"C:\\Program Files (x86)\\PuTTY_CERN\\putty.exe\" -ssh -X machine_at_cern.cern.ch . Fill out the other fields to your liking. You can even create a shortcut on the screen, from the right-click menu on the newly created connection. Alternative way to create configuration Create a file with the ending .xw32 , e.g on the desktop. Fill it with: <Session> <HideOnStart> false </HideOnStart> <Module> command </Module> <Name> name_you_want_to_give </Name> <NewInstance> never </NewInstance> <Settings> <Target> \"C:\\Program Files (x86)\\PuTTY_CERN\\putty.exe\" -ssh -X machine_at_cern.cern.ch </Target> </Settings> <ShowStatus> false </ShowStatus> <WindowMode> multiple </WindowMode> </Session> Click on file.","title":"Teleworking"},{"location":"resources/howto/teleworking/#resources-to-ease-teleworking","text":"","title":"Resources to Ease Teleworking"},{"location":"resources/howto/teleworking/#accessing-cern-internal-websites","text":"Adapted from here , you can create a web proxy: ssh -D 8090 username@lxtunnel.cern.ch The above command opens a tunnel at port 8090 which can be accessed via browser through localhost:8090 .","title":"Accessing CERN-internal websites"},{"location":"resources/howto/teleworking/#accessing-journal-papers-etc","text":"Lots of journals and resources can be accessed via the CERN ezproxy by prepending the viewing url with https://ezproxy.cern.ch/login?url= . See this website for a list.","title":"Accessing Journal Papers etc."},{"location":"resources/howto/teleworking/#running-graphical-software-on-lxplus-or-the-tn-eg-gui-eclipse","text":"The most intuitive way to run graphical software on computers within the CERN network from your own PC would be connecting to them by ssh -X and control their GUI via the forwarded X-Server. While this usually works fine from within CERN itself, where connection speeds are high, depending on the ping and bandwidth of your local connection this can be a frustrating experience. Using RDP is a way to avoid this, as with this protocol the graphical interface is rendered locally and only the picture of the screen is transmitted. Sadly, the machine you want to work on ( dev-server , optics-server ) will not have this installed. However, cernts.cern.ch allows you to connect to a windows machine via Remote Desktop Connection from Windows, or e.g. Remmina from Linux. Once logged in with your CERN credentials (Add CERN.CH\\ in front of your username to specify your domain) you can run: Start \u2192 X-Win32 18 \u2192 Lxplus (Default) which opens a putty-terminal connected to lxplus and starts a X-Server in the background. Putty and XServer on cernts Executing any graphical software from this terminal will ask for connection authorization, which you need to approve. Approval prompt for a connection to XServer This way you can run any graphical application smoothly. If your internet connection fails, you should still be able to resume your current session, at least for a while. Creating Shortcut to Other Machines In order to connect to another machine directly (instead of hopping through lxplus ) you can create a shortcut: Open X-Win32 18 Configuration . Manual... \u2192 More... \u2192 command . Target: \"C:\\Program Files (x86)\\PuTTY_CERN\\putty.exe\" -ssh -X machine_at_cern.cern.ch . Fill out the other fields to your liking. You can even create a shortcut on the screen, from the right-click menu on the newly created connection. Alternative way to create configuration Create a file with the ending .xw32 , e.g on the desktop. Fill it with: <Session> <HideOnStart> false </HideOnStart> <Module> command </Module> <Name> name_you_want_to_give </Name> <NewInstance> never </NewInstance> <Settings> <Target> \"C:\\Program Files (x86)\\PuTTY_CERN\\putty.exe\" -ssh -X machine_at_cern.cern.ch </Target> </Settings> <ShowStatus> false </ShowStatus> <WindowMode> multiple </WindowMode> </Session> Click on file.","title":"Running Graphical Software on lxplus or the TN (e.g. GUI, Eclipse)"}]}