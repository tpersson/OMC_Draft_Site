{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The OMC Team \u00b6 Overview \u00b6 The OMC team is part of the ABP group at CERN, in the HSS section. We are responsible for the measurement and correction of the linear and nonlinear optics in the LHC as well as other machines is the CERN accelerator complex. Our meetings can be found on our Indico page . Note - Documentation Status This site is currently under construction, incomplete, and subject to change. An existing but poor documentation can be found on the OMC twiki .","title":"The OMC Team"},{"location":"#the-omc-team","text":"","title":"The OMC Team"},{"location":"#overview","text":"The OMC team is part of the ABP group at CERN, in the HSS section. We are responsible for the measurement and correction of the linear and nonlinear optics in the LHC as well as other machines is the CERN accelerator complex. Our meetings can be found on our Indico page . Note - Documentation Status This site is currently under construction, incomplete, and subject to change. An existing but poor documentation can be found on the OMC twiki .","title":"Overview"},{"location":"general/methods/","text":"OMC Methods \u00b6 Note Very long content about the physics and practice of OMC methods + paper references for each (K-mod, 3D kicks, N-BPM...). Each method should be a H2, see examples below. N-BPM \u00b6 K-Modulation \u00b6 3D Kicks \u00b6","title":"OMC Methods"},{"location":"general/methods/#omc-methods","text":"Note Very long content about the physics and practice of OMC methods + paper references for each (K-mod, 3D kicks, N-BPM...). Each method should be a H2, see examples below.","title":"OMC Methods"},{"location":"general/methods/#n-bpm","text":"","title":"N-BPM"},{"location":"general/methods/#k-modulation","text":"","title":"K-Modulation"},{"location":"general/methods/#3d-kicks","text":"","title":"3D Kicks"},{"location":"general/miscellaneous/","text":"Miscellaneous OMC Resources \u00b6 Note Contents of getting to work at OMC / at CERN + links to helpful resources. For inspiration see here . Example links to include: LHC Optics website Batch Docs Useful softs such as SWAN , LHC Data Sources , Equipment Codes , etc. LHC Optics Repository Gitlab","title":"Miscellaneous"},{"location":"general/miscellaneous/#miscellaneous-omc-resources","text":"Note Contents of getting to work at OMC / at CERN + links to helpful resources. For inspiration see here . Example links to include: LHC Optics website Batch Docs Useful softs such as SWAN , LHC Data Sources , Equipment Codes , etc. LHC Optics Repository Gitlab","title":"Miscellaneous OMC Resources"},{"location":"general/physics/","text":"The Pysics of OMC \u00b6 Note Long and detailed note of the kind of accelerator physcis that OMC takes care of. Includes the prerequisites of accelerator physics necessary to do OMC work / understand OMC methods. See example headers below. Basics of Accelerator Physics \u00b6 LHC IR Linear Optics \u00b6 LHC IR NonLinear Optics \u00b6","title":"Physics of OMC"},{"location":"general/physics/#the-pysics-of-omc","text":"Note Long and detailed note of the kind of accelerator physcis that OMC takes care of. Includes the prerequisites of accelerator physics necessary to do OMC work / understand OMC methods. See example headers below.","title":"The Pysics of OMC"},{"location":"general/physics/#basics-of-accelerator-physics","text":"","title":"Basics of Accelerator Physics"},{"location":"general/physics/#lhc-ir-linear-optics","text":"","title":"LHC IR Linear Optics"},{"location":"general/physics/#lhc-ir-nonlinear-optics","text":"","title":"LHC IR NonLinear Optics"},{"location":"general/publications/","text":"OMC Publications \u00b6 Note Self-explanatory, see maybe ResearchGate and Roro's website for starters? Make each publication a collapsible note, with title + authors + link in the headers and BibTeX in the body. See example below. Journal Publications \u00b6 2020 \u00b6 Detection of faulty beam position monitors using unsupervised learning, E. Fol, R. Tom\u00e1s, J. Coello de Portugal, and G. Franchetti Phys. Rev. Accel. Beams 23, 102805, 2020 @article{faulty_bpm_detection, title = {Detection of faulty beam position monitors using unsupervised learning}, author = {Fol, E. and Tom\\'as, R. and Coello de Portugal, J. and Franchetti, G.}, journal = {Phys. Rev. Accel. Beams}, volume = {23}, issue = {10}, pages = {102805}, numpages = {10}, year = {2020}, month = {Oct}, publisher = {American Physical Society}, doi = {10.1103/PhysRevAccelBeams.23.102805}, url = {https://link.aps.org/doi/10.1103/PhysRevAccelBeams.23.102805} } 2019 \u00b6 2018 \u00b6 Strategy Reports \u00b6 MD Notes \u00b6 2020 \u00b6 2019 \u00b6 2018 \u00b6","title":"Publications"},{"location":"general/publications/#omc-publications","text":"Note Self-explanatory, see maybe ResearchGate and Roro's website for starters? Make each publication a collapsible note, with title + authors + link in the headers and BibTeX in the body. See example below.","title":"OMC Publications"},{"location":"general/publications/#journal-publications","text":"","title":"Journal Publications"},{"location":"general/publications/#2020","text":"Detection of faulty beam position monitors using unsupervised learning, E. Fol, R. Tom\u00e1s, J. Coello de Portugal, and G. Franchetti Phys. Rev. Accel. Beams 23, 102805, 2020 @article{faulty_bpm_detection, title = {Detection of faulty beam position monitors using unsupervised learning}, author = {Fol, E. and Tom\\'as, R. and Coello de Portugal, J. and Franchetti, G.}, journal = {Phys. Rev. Accel. Beams}, volume = {23}, issue = {10}, pages = {102805}, numpages = {10}, year = {2020}, month = {Oct}, publisher = {American Physical Society}, doi = {10.1103/PhysRevAccelBeams.23.102805}, url = {https://link.aps.org/doi/10.1103/PhysRevAccelBeams.23.102805} }","title":"2020"},{"location":"general/publications/#2019","text":"","title":"2019"},{"location":"general/publications/#2018","text":"","title":"2018"},{"location":"general/publications/#strategy-reports","text":"","title":"Strategy Reports"},{"location":"general/publications/#md-notes","text":"","title":"MD Notes"},{"location":"general/publications/#2020_1","text":"","title":"2020"},{"location":"general/publications/#2019_1","text":"","title":"2019"},{"location":"general/publications/#2018_1","text":"","title":"2018"},{"location":"gui/betabeat/analysis_panel/","text":"The Beta-Beat GUI Analysis Panel \u00b6 The analysis panel provides graphical interface to visualize results from harmonic analysis performed on measured data. The results are given in the tfs format. In the analysis panel one can edit the dp/p value in the corresponding column, and see the changes applied. The Time / Space Tab \u00b6 In the Time / Space tab one can examine the phases and amplitudes, and can clean the values if needed (only TUNEX and TUNEY or NATTUNEX and NATTUNEY ). If some values are obviously not inside a given bound, the 2 marker lines (see screenshot below) can be used to set the boundaries and to remove all data outside those boundaries. The GUI will check if the removal is inside some predefined bounds to prevent accidental removal of too much data. Todo Include a screenshot of the time / space panel with relevant info highlighted (see twiki) The Frequency Tab \u00b6 The Frequency tab displays the computed frequencies for every BPM. A Get Optics button can be used to start the optics calculation. This will call an external python script again, with the results available in the Optics Panel . Todo Include a screenshot of the frequency panel.","title":"The Analysis Panel"},{"location":"gui/betabeat/analysis_panel/#the-beta-beat-gui-analysis-panel","text":"The analysis panel provides graphical interface to visualize results from harmonic analysis performed on measured data. The results are given in the tfs format. In the analysis panel one can edit the dp/p value in the corresponding column, and see the changes applied.","title":"The Beta-Beat GUI Analysis Panel"},{"location":"gui/betabeat/analysis_panel/#the-time-space-tab","text":"In the Time / Space tab one can examine the phases and amplitudes, and can clean the values if needed (only TUNEX and TUNEY or NATTUNEX and NATTUNEY ). If some values are obviously not inside a given bound, the 2 marker lines (see screenshot below) can be used to set the boundaries and to remove all data outside those boundaries. The GUI will check if the removal is inside some predefined bounds to prevent accidental removal of too much data. Todo Include a screenshot of the time / space panel with relevant info highlighted (see twiki)","title":"The Time / Space Tab"},{"location":"gui/betabeat/analysis_panel/#the-frequency-tab","text":"The Frequency tab displays the computed frequencies for every BPM. A Get Optics button can be used to start the optics calculation. This will call an external python script again, with the results available in the Optics Panel . Todo Include a screenshot of the frequency panel.","title":"The Frequency Tab"},{"location":"gui/betabeat/bpm_panel/","text":"The Beta-Beat GUI BPM Panel \u00b6 The BPM panel provides a graphical interface to query and visualize information for the BPM data files. It can load data files for all supported beams, mostly binary SDDS files or files in the SDDS ASCII format. Todo Include a screenshot, possibly of settings when opening files? Setting Your Defaults The GUI defaults to specific locations for which Beta-Beat.src directory to use, for input path of you data. etc. It is possible to set these default values yourself by creating a file named bbgui_user.properties in your home folder. Different key-value pairs can be set inside for the desired defaults, see an example below: beam = LHCB1_RUNII_2018 inputPath = /some/afs/location/with/your/data/ outputPath = /some/afs/location/with/your/results/ betaBeatPath = /some/afs/location/with/your/Beta-Beat.src/ loadData = True oldFolderStructure = False Opening Files and Applying SVD Cleaning \u00b6 The content of the loaded files will be displayed in two charts: One for the horizontal BPMs, One for the vertical BPMs. Todo Include a screenshot with two BPM panels. The charts are interactive and can be used to zoom in/out, or focus on a given rectangle of the shown data. The charts can display either the measured amplitude values over turns for every BPM from the list or display the phase space, which is calculated by two consecutive BPMs. Additional functionality is done while loading a file. If SVD is enabled in the settings, the external SVD cleaning python script will be called for the current file during the loading process. If SVD cleaning detects and removes bad BPMs, they can be reviewed inside the bad BPM pane. Todo Include a screenshot of the bad bpms panel. Removing Turns and Computing an Average \u00b6 The buttons on the top left side of the pane provide useful features to handle the BPM data. Remove Turns can be used to cut turns from the start or the end, to focus on a specified range of the data. Todo Include a screenshot of before-after comparison for Remove Turns . Create Average allows loading several data files too visualize their average repesentations on the same graph, which helps detecting differences or reducing noise. Todo Include a screenshot of Create Average effect. Do Analysis spawns the configuration dialogue for the external analysis. This will call an external program to perform harmonic analysis of the BPM data, in order to compute tunes and similar beam properties. The results from the analysis can be seen in the Analysis Panel . Todo Include of screenshot of Do Analysis dialogue window. Note The Create Average option requires synchronized data from withing the same bounds, otherwise the results will be meaningless. The figure below shows three runs from LHC beam one with synchronized peaks for every turn and their corresponding averages.","title":"The BPM Panel"},{"location":"gui/betabeat/bpm_panel/#the-beta-beat-gui-bpm-panel","text":"The BPM panel provides a graphical interface to query and visualize information for the BPM data files. It can load data files for all supported beams, mostly binary SDDS files or files in the SDDS ASCII format. Todo Include a screenshot, possibly of settings when opening files? Setting Your Defaults The GUI defaults to specific locations for which Beta-Beat.src directory to use, for input path of you data. etc. It is possible to set these default values yourself by creating a file named bbgui_user.properties in your home folder. Different key-value pairs can be set inside for the desired defaults, see an example below: beam = LHCB1_RUNII_2018 inputPath = /some/afs/location/with/your/data/ outputPath = /some/afs/location/with/your/results/ betaBeatPath = /some/afs/location/with/your/Beta-Beat.src/ loadData = True oldFolderStructure = False","title":"The Beta-Beat GUI BPM Panel"},{"location":"gui/betabeat/bpm_panel/#opening-files-and-applying-svd-cleaning","text":"The content of the loaded files will be displayed in two charts: One for the horizontal BPMs, One for the vertical BPMs. Todo Include a screenshot with two BPM panels. The charts are interactive and can be used to zoom in/out, or focus on a given rectangle of the shown data. The charts can display either the measured amplitude values over turns for every BPM from the list or display the phase space, which is calculated by two consecutive BPMs. Additional functionality is done while loading a file. If SVD is enabled in the settings, the external SVD cleaning python script will be called for the current file during the loading process. If SVD cleaning detects and removes bad BPMs, they can be reviewed inside the bad BPM pane. Todo Include a screenshot of the bad bpms panel.","title":"Opening Files and Applying SVD Cleaning"},{"location":"gui/betabeat/bpm_panel/#removing-turns-and-computing-an-average","text":"The buttons on the top left side of the pane provide useful features to handle the BPM data. Remove Turns can be used to cut turns from the start or the end, to focus on a specified range of the data. Todo Include a screenshot of before-after comparison for Remove Turns . Create Average allows loading several data files too visualize their average repesentations on the same graph, which helps detecting differences or reducing noise. Todo Include a screenshot of Create Average effect. Do Analysis spawns the configuration dialogue for the external analysis. This will call an external program to perform harmonic analysis of the BPM data, in order to compute tunes and similar beam properties. The results from the analysis can be seen in the Analysis Panel . Todo Include of screenshot of Do Analysis dialogue window. Note The Create Average option requires synchronized data from withing the same bounds, otherwise the results will be meaningless. The figure below shows three runs from LHC beam one with synchronized peaks for every turn and their corresponding averages.","title":"Removing Turns and Computing an Average"},{"location":"gui/betabeat/correction_panel/","text":"The Beta-Beat GUI Correction Panel \u00b6 The Correction panel displays the corrections computed from the Optics panel to bring back the measured machine to nominal model conditions. It provides an Open Knob Panel button to access the LHC beam process list. The Knob Panel \u00b6 Through the Knob Panel , corrections can be provided directly inside the LHC beam system. Info Being inside of the Technical Network is required for the KnobPanel. To do so, ssh into one of the hosts, for instance cs-ccr-dev<number>.cern.ch . In the Knob Panel , one can create Knobs (in the Creation tab) by using the previously computed corrections. To create a knob, one or several beam processes have to be selected. Once selected, the corresponding optics will appear. At least one optic has to be selected. After providing a Knob name , the Create Knob button will create a new Knob in the LSA database. Todo Include a screenshot of the Knob Panel on creation tab The View Knobs tab displays a list of all BETA-BEATING Knobs. By selecting one, the user can examine or visualize the values attributed to each component. Todo Include a screenshot of the Knob Panel view knobs table Todo Include a screenshot of the Knob Panel view knobs chart","title":"The Correction Panel"},{"location":"gui/betabeat/correction_panel/#the-beta-beat-gui-correction-panel","text":"The Correction panel displays the corrections computed from the Optics panel to bring back the measured machine to nominal model conditions. It provides an Open Knob Panel button to access the LHC beam process list.","title":"The Beta-Beat GUI Correction Panel"},{"location":"gui/betabeat/correction_panel/#the-knob-panel","text":"Through the Knob Panel , corrections can be provided directly inside the LHC beam system. Info Being inside of the Technical Network is required for the KnobPanel. To do so, ssh into one of the hosts, for instance cs-ccr-dev<number>.cern.ch . In the Knob Panel , one can create Knobs (in the Creation tab) by using the previously computed corrections. To create a knob, one or several beam processes have to be selected. Once selected, the corresponding optics will appear. At least one optic has to be selected. After providing a Knob name , the Create Knob button will create a new Knob in the LSA database. Todo Include a screenshot of the Knob Panel on creation tab The View Knobs tab displays a list of all BETA-BEATING Knobs. By selecting one, the user can examine or visualize the values attributed to each component. Todo Include a screenshot of the Knob Panel view knobs table Todo Include a screenshot of the Knob Panel view knobs chart","title":"The Knob Panel"},{"location":"gui/betabeat/gui/","text":"The Beta-Beat GUI \u00b6 The Beta-Beat GUI provides different functionalities separated in multiple views, in the form of a graphical interface. The GUI can be ran locally, provided you have access to afs , but most importantly directly from the CERN Control Center. This section provides a short overview for the main features. The GUI provides several panels, each for a defined use and with a set of options and results: The BPM Panel for loading measurements files, displaying data and launching analysis. The Analysis Panel to display and manipulate the results of harmonic analysis on measurement data. The Optics Panel to compare computed optics to nominal models. The Correction Panel to display the computed necessary corrections to reach the nominal model. This site will guide you through the GUI's layout and functionality. For starters, see here about running the GUI.","title":"The Beta-Beat GUI"},{"location":"gui/betabeat/gui/#the-beta-beat-gui","text":"The Beta-Beat GUI provides different functionalities separated in multiple views, in the form of a graphical interface. The GUI can be ran locally, provided you have access to afs , but most importantly directly from the CERN Control Center. This section provides a short overview for the main features. The GUI provides several panels, each for a defined use and with a set of options and results: The BPM Panel for loading measurements files, displaying data and launching analysis. The Analysis Panel to display and manipulate the results of harmonic analysis on measurement data. The Optics Panel to compare computed optics to nominal models. The Correction Panel to display the computed necessary corrections to reach the nominal model. This site will guide you through the GUI's layout and functionality. For starters, see here about running the GUI.","title":"The Beta-Beat GUI"},{"location":"gui/betabeat/optics_panel/","text":"The Beta-Beat GUI Optics Panel \u00b6 The Optics Panel provides graphical interface to compare the computed optics to the nominal model. There are in total three main tabs for the optics panel: The Optics tab, where a tree menu (on the left) provides many physical properties to be displayed. The Segment-by-Segment: Segment tab, to have a look at properties in a pre-defined segment of the machine. The Segment-by-Segment: Element tab, to have a look at properties for a pre-defined list of elements in the machine. Optics Tab \u00b6 By default, the user is taken to the Optics tab. A wide variety of computed physical properties can be visualized across the entire machine. Todo Include a screenshot with the main optics tab. Segment-by-Segment: Segment Tab \u00b6 A list of pre-defined segments of the machine can be selected to view properties across said segment. Todo Include a screenshot of segment selection. In the event that one wants to visualize a specific, non pre-defined segment, it is possible to create a new one. To do so: In the Optics tab, pick the start BPM by clicking on a BPM point on the optics chart. Pick the end BPM by clicking on another BPM point. A pop-up appears in which the name of the new segment has to be entered. Todo Include a screenshot of the new segment creation dialogue. Clicking Go will call for another python script and take you to the Segment-by-Segment tab to view the results. Segment-by-Segment: Element Tab \u00b6 Pre-defined lists of elements can be selected to view properties across said elements. The working is similar to the one for different segments . Todo Include a screenshot of the element tab. Computing Corrections \u00b6 The Correction button at the bottom left of the optics panel can be used to calculate the optics corrections for the beam process. The settings dialogue offers a wide range of different options for corrections. This will call different external python scripts again. These scripts calculate corrections for beta-beat, coupling and horizontal and vertical dispersion using the computed response matrices. The following methods implement different correction algorithms: Coupling : Single beam correction of coupling resonances and vertical dispersion. Global correction : Single beam correction of phase, beta and horizontal dispersion. Iterative correction : Two-beams version of the global correction. Chromatic coupling : Single beam correction of chromatic coupling using skew sextupoles at dispersive locations. Note The Iterative correction method is currently not compatible and thus disabled. The results are outputted in the changeparameters files. These files store the magnet names and corresponding correction strengths. They are also displayed in the Correction Panel .","title":"The Optics Panel"},{"location":"gui/betabeat/optics_panel/#the-beta-beat-gui-optics-panel","text":"The Optics Panel provides graphical interface to compare the computed optics to the nominal model. There are in total three main tabs for the optics panel: The Optics tab, where a tree menu (on the left) provides many physical properties to be displayed. The Segment-by-Segment: Segment tab, to have a look at properties in a pre-defined segment of the machine. The Segment-by-Segment: Element tab, to have a look at properties for a pre-defined list of elements in the machine.","title":"The Beta-Beat GUI Optics Panel"},{"location":"gui/betabeat/optics_panel/#optics-tab","text":"By default, the user is taken to the Optics tab. A wide variety of computed physical properties can be visualized across the entire machine. Todo Include a screenshot with the main optics tab.","title":"Optics Tab"},{"location":"gui/betabeat/optics_panel/#segment-by-segment-segment-tab","text":"A list of pre-defined segments of the machine can be selected to view properties across said segment. Todo Include a screenshot of segment selection. In the event that one wants to visualize a specific, non pre-defined segment, it is possible to create a new one. To do so: In the Optics tab, pick the start BPM by clicking on a BPM point on the optics chart. Pick the end BPM by clicking on another BPM point. A pop-up appears in which the name of the new segment has to be entered. Todo Include a screenshot of the new segment creation dialogue. Clicking Go will call for another python script and take you to the Segment-by-Segment tab to view the results.","title":"Segment-by-Segment: Segment Tab"},{"location":"gui/betabeat/optics_panel/#segment-by-segment-element-tab","text":"Pre-defined lists of elements can be selected to view properties across said elements. The working is similar to the one for different segments . Todo Include a screenshot of the element tab.","title":"Segment-by-Segment: Element Tab"},{"location":"gui/betabeat/optics_panel/#computing-corrections","text":"The Correction button at the bottom left of the optics panel can be used to calculate the optics corrections for the beam process. The settings dialogue offers a wide range of different options for corrections. This will call different external python scripts again. These scripts calculate corrections for beta-beat, coupling and horizontal and vertical dispersion using the computed response matrices. The following methods implement different correction algorithms: Coupling : Single beam correction of coupling resonances and vertical dispersion. Global correction : Single beam correction of phase, beta and horizontal dispersion. Iterative correction : Two-beams version of the global correction. Chromatic coupling : Single beam correction of chromatic coupling using skew sextupoles at dispersive locations. Note The Iterative correction method is currently not compatible and thus disabled. The results are outputted in the changeparameters files. These files store the magnet names and corresponding correction strengths. They are also displayed in the Correction Panel .","title":"Computing Corrections"},{"location":"gui/betabeat/running/","text":"Running the Beta-Beat GUI \u00b6 The GUI can be started from inside eclipse (which will prompt you with the logging window) or from an external archive site . At the following links, you can also find: The current production version . The current development version . The complete list of releases . Note Please note that these site are currently available only to devices connected to the CERN network. From there, open the .jnlp executable inside a browser, or call it with javaws from the command line. For convenience, there are scripts to run it directly from afs at the following location: /afs/cern.ch/eng/sl/lintrack/Beta-Beat.src/GUI Compatibility Issues Since javaws (java web start) makes trouble due to intenal security mechanisms, a replacement named jws was developed and has to be used to run the jlnp file. For further information see the jws Confluence page. Requirements \u00b6 The following are required to run the Beta-Beat GUI: A Linux-based operating system (running CentOS 7 as do the CERN servers is recommended). A version of Java>=7 . The jws replacement for javaws . Info Being inside of the Technical Network is required for the KnobPanel. To do so, ssh into one of the hosts, for instance cs-ccr-dev<number>.cern.ch . Troubleshooting \u00b6 You may encounter the following errors: Problems with execution due to disabled Java \u00b6 If you encounter a complaint about Java being too old, try using /mcr/bin/javaws . Failure javaws http://abwww/ap/dist/lhc/lhc-app-beta-beating/PRO/BetaBeating-Control-3t.jnlp Disabling Java as it is too old and likely to be insecure. To reenable use jcontrol utility Success /mcr/bin/javaws http://abwww/ap/dist/lhc/lhc-app-beta-beating/PRO/BetaBeating-Control-3t.jnlp Unspecific Error \u00b6 Failure Any random error If so, check that you can import numpy from the omc-anaconda-python . If this leads to the previously raised error, then the permissions are broken. Either fix the permissions on afs or ask someone to do so for you.","title":"Running the GUI"},{"location":"gui/betabeat/running/#running-the-beta-beat-gui","text":"The GUI can be started from inside eclipse (which will prompt you with the logging window) or from an external archive site . At the following links, you can also find: The current production version . The current development version . The complete list of releases . Note Please note that these site are currently available only to devices connected to the CERN network. From there, open the .jnlp executable inside a browser, or call it with javaws from the command line. For convenience, there are scripts to run it directly from afs at the following location: /afs/cern.ch/eng/sl/lintrack/Beta-Beat.src/GUI Compatibility Issues Since javaws (java web start) makes trouble due to intenal security mechanisms, a replacement named jws was developed and has to be used to run the jlnp file. For further information see the jws Confluence page.","title":"Running the Beta-Beat GUI"},{"location":"gui/betabeat/running/#requirements","text":"The following are required to run the Beta-Beat GUI: A Linux-based operating system (running CentOS 7 as do the CERN servers is recommended). A version of Java>=7 . The jws replacement for javaws . Info Being inside of the Technical Network is required for the KnobPanel. To do so, ssh into one of the hosts, for instance cs-ccr-dev<number>.cern.ch .","title":"Requirements"},{"location":"gui/betabeat/running/#troubleshooting","text":"You may encounter the following errors:","title":"Troubleshooting"},{"location":"gui/betabeat/running/#problems-with-execution-due-to-disabled-java","text":"If you encounter a complaint about Java being too old, try using /mcr/bin/javaws . Failure javaws http://abwww/ap/dist/lhc/lhc-app-beta-beating/PRO/BetaBeating-Control-3t.jnlp Disabling Java as it is too old and likely to be insecure. To reenable use jcontrol utility Success /mcr/bin/javaws http://abwww/ap/dist/lhc/lhc-app-beta-beating/PRO/BetaBeating-Control-3t.jnlp","title":"Problems with execution due to disabled Java"},{"location":"gui/betabeat/running/#unspecific-error","text":"Failure Any random error If so, check that you can import numpy from the omc-anaconda-python . If this leads to the previously raised error, then the permissions are broken. Either fix the permissions on afs or ask someone to do so for you.","title":"Unspecific Error"},{"location":"gui/kmod/autotrim/","text":"Auto Trim \u00b6 The AutoTrim functionality combines all existing tasks in the Kmod GUI. The user can choose tasks to do for each IP . The AutoTrim then executes all the trimming tasks and analyzing tasks in the best order possible to optimize the process. The user can input parameters once to do the k-modulation and other analysis tasks on many IP 's. The results and current status of each process is displayed on the main panel. The AutoTrim provides something like a pipeline of many k-modulations and their analyzing tasks. First Time AutoTrim If you are in the CCC and have never used the AutoTrim before, follow these steps: Open the AutoTrimDialog by clicking on the AutoTim button located on the left side of the main panel. Add the IPs you want to trim or analyze with the buttons on the left side. Input the trim parameter or load an existing trim for each IP tab. Select the analyzing options you want to execute. Input the needed values for the trim and all the optional tasks. Once everything is set up, right press the Start button and select the directory where to save the results (It will save the results depending on the trim time and IP . See wiki for more information). The AutoTrim will now check if the orbit feedback is on and the tune feedback is off. Make sure to put them in the desired state. The ResultsView will open and the AutoTrim gets started. AutoTrim Panel \u00b6 The InputPanel \u00b6 This input panel provides all the options to set every parameter for k-modulation. On the left panel the user can choose which IP to trim or analyze. Depending on the parameters, the panel will show input panels for the specific IPs: each panel has a top bar with optional tasks that can be executed after the trim as well as an input field for the current energy. The energy value is gathered live from the LHC, but can be edited. Underneath is another tabbed pane for each task in the current process which needs some user input. By pressing the start button, it will ask the user for the save directory and then starts the AutoTrim process. AutoTrim will then create a result folder for each IP , open the ResultsView on the main panel and start the pipeline of processes. The chosen save directory is the root directory. The AutoTrim will then create a subdirectory for each IP where the result files are stored. Todo Include screenshot of Trim/Analyze InputPanel The ResultsView \u00b6 The ResultsView is the main panel of an AutoTrim process. It is built as a tabbed pane which holds the content of the processes for many IPs and displays information such as process status, results, etc. The status panel and the result panel are the main components for each process. At the top is a thread queue bar which displays all the active, finished and scheduled threads. Todo Include screenshot of thread queue Tip By double-clicking on the IP label of the tabbed pane its possible to extract the IP panel in another frame. It will snap back to the tabbed pane if it gets closed by the user. The Status Panel \u00b6 The status panel shows information about the current process, with the currently running task is displayed at the top. The user can click through the list of tasks to see start/end time, input parameters, log entries, and the current status. There is also a panel for the input parameter of thes current task. This has to be done in the actual task code since the view doesn't have a reference to the task. The last panel is the logger text area for each task. Per default, it will show the last logging entry with the corresponding time, but the user can expand the list by clicking on the drop-down button. Todo Include screenshot of status panel Status Types Explained Status / Color Description Starting, green Task is creating all the needed objects or loads some data from a file.* Running, green Main functionality of this task is currently executed. Finished, blue Task finished without any problems. Waiting, blue Task is waiting for some synchronization variable.* Scheduled, grey Task is in the queue and ready to be executed. Canceled, yellow Task got canceled by the user (Not possible still a big TODO). Crashed, red Task crashed because an exception is fired or a critical error occurred. Loading Existing Trims from Timber \u00b6 The AutoTrim provides two ways to add existing trim data to the process queue: Adding the selected Timber entry directly to an existing IP tab in the AutoTrim panel. There, one can only select the trim entries depending on the IP of the tab. Selecting any trim you want with the Trim-Selection panel, which will then add the selected trims as tabs to the AutoTrim panel. Load a trim directly to an AutoTrim-Tab \u00b6 Start by creating your IP tab by clicking on the button on the left side: tick the Load existing trim checkbox and it will open the trim selection panel. Expand the date picker and choose the day when the trim was executed. Left click on the trim you want to load and press the select button. The loaded trim date is then displayed on the trim panel and all the other input fields for the Full IP Trim are disabled, as input is not needed. To discard the loaded trim and proceed with the Full IP Trim instead, untick the Load existing trim checkbox. Todo Include screenshots of trim selection in autotrim The Trim-Selection Panel \u00b6 The Trim-Selection panel will add the selected trim data as tabs to the AutoTrim panel. It also provides some basic options to apply to every tab, such as setting analyzing the orbit to default. This might be the best option if you want to reanalyze many trims with the same model. Open this panel by pressing the Load Trims button located on the bottom center of the AutoTrim panel. Filter the Timber entries by IP and date, then select the trim entries in the Search Results panel and press the green Add selected trim button. The trims are now selected and displayed in the Selected Trims panel. By clicking on confirm the tabs will be added to the AutoTrim panel. You can now set some basic options for the selected trims in the Options pane. These values are automatically set as preset values for the loaded trim tabs. Todo Include screenshots of trim selection wizard Simulation Mode \u00b6 The kmod application provides two different modes to execute all its functionality: The Measurement mode , which is the standard mode and should be used in the control center to gather real data from the LHC. The Simulation mode , which only simulates these live measurements. If you start a normal trim task in Simulation mode the AutoTrim will load the last trim data from timber. This data is then displayed like a normal trim during a live measurement. The energy value is not automatically loaded from Timber, and uses a preset value of 6500.0 GeV. The AutoTrim won't check if the Orbit and Tune feedback is on or off. Todo Include gif like in the twiki","title":"Using Auto Trim"},{"location":"gui/kmod/autotrim/#auto-trim","text":"The AutoTrim functionality combines all existing tasks in the Kmod GUI. The user can choose tasks to do for each IP . The AutoTrim then executes all the trimming tasks and analyzing tasks in the best order possible to optimize the process. The user can input parameters once to do the k-modulation and other analysis tasks on many IP 's. The results and current status of each process is displayed on the main panel. The AutoTrim provides something like a pipeline of many k-modulations and their analyzing tasks. First Time AutoTrim If you are in the CCC and have never used the AutoTrim before, follow these steps: Open the AutoTrimDialog by clicking on the AutoTim button located on the left side of the main panel. Add the IPs you want to trim or analyze with the buttons on the left side. Input the trim parameter or load an existing trim for each IP tab. Select the analyzing options you want to execute. Input the needed values for the trim and all the optional tasks. Once everything is set up, right press the Start button and select the directory where to save the results (It will save the results depending on the trim time and IP . See wiki for more information). The AutoTrim will now check if the orbit feedback is on and the tune feedback is off. Make sure to put them in the desired state. The ResultsView will open and the AutoTrim gets started.","title":"Auto Trim"},{"location":"gui/kmod/autotrim/#autotrim-panel","text":"","title":"AutoTrim Panel"},{"location":"gui/kmod/autotrim/#the-inputpanel","text":"This input panel provides all the options to set every parameter for k-modulation. On the left panel the user can choose which IP to trim or analyze. Depending on the parameters, the panel will show input panels for the specific IPs: each panel has a top bar with optional tasks that can be executed after the trim as well as an input field for the current energy. The energy value is gathered live from the LHC, but can be edited. Underneath is another tabbed pane for each task in the current process which needs some user input. By pressing the start button, it will ask the user for the save directory and then starts the AutoTrim process. AutoTrim will then create a result folder for each IP , open the ResultsView on the main panel and start the pipeline of processes. The chosen save directory is the root directory. The AutoTrim will then create a subdirectory for each IP where the result files are stored. Todo Include screenshot of Trim/Analyze InputPanel","title":"The InputPanel"},{"location":"gui/kmod/autotrim/#the-resultsview","text":"The ResultsView is the main panel of an AutoTrim process. It is built as a tabbed pane which holds the content of the processes for many IPs and displays information such as process status, results, etc. The status panel and the result panel are the main components for each process. At the top is a thread queue bar which displays all the active, finished and scheduled threads. Todo Include screenshot of thread queue Tip By double-clicking on the IP label of the tabbed pane its possible to extract the IP panel in another frame. It will snap back to the tabbed pane if it gets closed by the user.","title":"The ResultsView"},{"location":"gui/kmod/autotrim/#the-status-panel","text":"The status panel shows information about the current process, with the currently running task is displayed at the top. The user can click through the list of tasks to see start/end time, input parameters, log entries, and the current status. There is also a panel for the input parameter of thes current task. This has to be done in the actual task code since the view doesn't have a reference to the task. The last panel is the logger text area for each task. Per default, it will show the last logging entry with the corresponding time, but the user can expand the list by clicking on the drop-down button. Todo Include screenshot of status panel Status Types Explained Status / Color Description Starting, green Task is creating all the needed objects or loads some data from a file.* Running, green Main functionality of this task is currently executed. Finished, blue Task finished without any problems. Waiting, blue Task is waiting for some synchronization variable.* Scheduled, grey Task is in the queue and ready to be executed. Canceled, yellow Task got canceled by the user (Not possible still a big TODO). Crashed, red Task crashed because an exception is fired or a critical error occurred.","title":"The Status Panel"},{"location":"gui/kmod/autotrim/#loading-existing-trims-from-timber","text":"The AutoTrim provides two ways to add existing trim data to the process queue: Adding the selected Timber entry directly to an existing IP tab in the AutoTrim panel. There, one can only select the trim entries depending on the IP of the tab. Selecting any trim you want with the Trim-Selection panel, which will then add the selected trims as tabs to the AutoTrim panel.","title":"Loading Existing Trims from Timber"},{"location":"gui/kmod/autotrim/#load-a-trim-directly-to-an-autotrim-tab","text":"Start by creating your IP tab by clicking on the button on the left side: tick the Load existing trim checkbox and it will open the trim selection panel. Expand the date picker and choose the day when the trim was executed. Left click on the trim you want to load and press the select button. The loaded trim date is then displayed on the trim panel and all the other input fields for the Full IP Trim are disabled, as input is not needed. To discard the loaded trim and proceed with the Full IP Trim instead, untick the Load existing trim checkbox. Todo Include screenshots of trim selection in autotrim","title":"Load a trim directly to an AutoTrim-Tab"},{"location":"gui/kmod/autotrim/#the-trim-selection-panel","text":"The Trim-Selection panel will add the selected trim data as tabs to the AutoTrim panel. It also provides some basic options to apply to every tab, such as setting analyzing the orbit to default. This might be the best option if you want to reanalyze many trims with the same model. Open this panel by pressing the Load Trims button located on the bottom center of the AutoTrim panel. Filter the Timber entries by IP and date, then select the trim entries in the Search Results panel and press the green Add selected trim button. The trims are now selected and displayed in the Selected Trims panel. By clicking on confirm the tabs will be added to the AutoTrim panel. You can now set some basic options for the selected trims in the Options pane. These values are automatically set as preset values for the loaded trim tabs. Todo Include screenshots of trim selection wizard","title":"The Trim-Selection Panel"},{"location":"gui/kmod/autotrim/#simulation-mode","text":"The kmod application provides two different modes to execute all its functionality: The Measurement mode , which is the standard mode and should be used in the control center to gather real data from the LHC. The Simulation mode , which only simulates these live measurements. If you start a normal trim task in Simulation mode the AutoTrim will load the last trim data from timber. This data is then displayed like a normal trim during a live measurement. The energy value is not automatically loaded from Timber, and uses a preset value of 6500.0 GeV. The AutoTrim won't check if the Orbit and Tune feedback is on or off. Todo Include gif like in the twiki","title":"Simulation Mode"},{"location":"gui/kmod/full_ip_trim/","text":"Performing a Full IP Trim \u00b6 The Full IP Trim module of the GUI executes the K-Modulation on a selected Interaction Point with its predefined quadrupoles. Each bigger experiment like ATLAS (IP1), ALICE (IP2), CMS (IP5) and LHCb (IP8) is referred to by its corresponding number in the LHC complex. Todo Include screenshots of IP selection By using this module, the quadrupole identifier and several other parameters are predefined to the corresponding Interaction Points. After the modulation is done, the trim data is present on the database and can be visualized and analyzed using the measurement view dialog. In order to start the K-Modulation on a magnet, the power converter has to be accessed using the CERN provided LSA Java API. The available parameters are the following: Delta I: Change of magnet strength in Amperes. Default value is 6.0A . Frequency: How fast the magnet strength is changed. Default value is 0.013 . Cycles: How many times the modulation is done. Default value is 3 . Todo Include screenshot of trim parameters input Result Panel \u00b6 While the Full IP Trim is executed the current and the tune values are displayed live in the result panel. After the modulation is done, it will show the whole trim results in the corresponding ResultPanel of this trimming task. The trim results are stored in the save directory of the current IP . Todo Include screenshot of full IP trim with tune history results","title":"Full IP Trim"},{"location":"gui/kmod/full_ip_trim/#performing-a-full-ip-trim","text":"The Full IP Trim module of the GUI executes the K-Modulation on a selected Interaction Point with its predefined quadrupoles. Each bigger experiment like ATLAS (IP1), ALICE (IP2), CMS (IP5) and LHCb (IP8) is referred to by its corresponding number in the LHC complex. Todo Include screenshots of IP selection By using this module, the quadrupole identifier and several other parameters are predefined to the corresponding Interaction Points. After the modulation is done, the trim data is present on the database and can be visualized and analyzed using the measurement view dialog. In order to start the K-Modulation on a magnet, the power converter has to be accessed using the CERN provided LSA Java API. The available parameters are the following: Delta I: Change of magnet strength in Amperes. Default value is 6.0A . Frequency: How fast the magnet strength is changed. Default value is 0.013 . Cycles: How many times the modulation is done. Default value is 3 . Todo Include screenshot of trim parameters input","title":"Performing a Full IP Trim"},{"location":"gui/kmod/full_ip_trim/#result-panel","text":"While the Full IP Trim is executed the current and the tune values are displayed live in the result panel. After the modulation is done, it will show the whole trim results in the corresponding ResultPanel of this trimming task. The trim results are stored in the save directory of the current IP . Todo Include screenshot of full IP trim with tune history results","title":"Result Panel"},{"location":"gui/kmod/gui/","text":"The Kmod GUI \u00b6 The Kmod GUI provides functionality to perform K-Modulation either as a full IP trim or through an individual magnet circuit, in the form of a graphical interface. It also has the ability to extract and analyze data from previous trims. This site will guide you through the GUI's layout and functionality. For starters, see here about running the GUI.","title":"The Kmod GUI"},{"location":"gui/kmod/gui/#the-kmod-gui","text":"The Kmod GUI provides functionality to perform K-Modulation either as a full IP trim or through an individual magnet circuit, in the form of a graphical interface. It also has the ability to extract and analyze data from previous trims. This site will guide you through the GUI's layout and functionality. For starters, see here about running the GUI.","title":"The Kmod GUI"},{"location":"gui/kmod/individual_modulation/","text":"Performing Individual Magnet Modulation \u00b6 The Kmod GUI also allows for a modulation of a given magnet circuit. This is used for example for the quadrupoles in the matching section of the experimental insertions, or in the RF insertion, where one circuits corresponds to one quadrupole. The Kmodulation data can then be used to extract the beta-functions at instruments (e.g. BSRT ) between the quadrupoles. As of 2018, the instruments for which the measured beta-function has been used for calibration are the Wirescanner ( BWS.5 ) and the undulator ( MU.B5 ) or dipole D3 ( MBRS.5 ) for the BSRT . All these instruments are located between Q5R and Q5L . Additionally, in beam 2, between MQM.7L4.B2 and MQY.6L4.B2 the BGV demonstrator is located ( B7L4.B2 ). Circuit Selection \u00b6 The first step is to select a magnet circuit to use. You can do so under Parameter Selection -> Select Quadrupole . The circuit corresponding to the quadrupole to be modulated has to be selected on the right hand side of the panel and added via the add quadrupole button to the left hand side. As example for the naming convention, the circuit RQ5/.R4B2/K1 corresponds to the MQY.5R4.B2 in the LHC sequence file. Under Trim Function , select Sine Function before continuing. Todo Include screenshot of circuit selection Trim Start \u00b6 The trim current, frequency, and number of cycles should be entered on the right hand side of the window and need to be set via the apply settings button. Normal values for trim I in IR4 are 2A at injection for the Q5 and 12A at 6.5 TeV for the Q5 . Values for other magnets can be found in the elogbook in the shifts logs of the 28/04/2018 and 07/10/2016 . Data acquisition is started with the Start Acquiring button, following by starting the trim with the Start trim button. After the trim is finished, acquisition of data needs to be stopped using the Stop Acquiring button. Todo Include screenshot of trim start Warning The start and end time should be noted down in the elogbook for later data extraction, as no automatic extraction like in the IP modulation case exists. Trim Extraction \u00b6 After acquisition during a trim, data can then be extracted by selecting the circuit in the Select Quadrupole panel under Parameter selection and pushing the extract previous trim button. The trim start and end times as well as the beam energy need to be entered. In the following panel, the trim data can then be saved via the Save magnet measurement button. Todo Include screenshot of trim extraction The analysis of the extracted Kmod data is described in the next section .","title":"Magnet Modulation"},{"location":"gui/kmod/individual_modulation/#performing-individual-magnet-modulation","text":"The Kmod GUI also allows for a modulation of a given magnet circuit. This is used for example for the quadrupoles in the matching section of the experimental insertions, or in the RF insertion, where one circuits corresponds to one quadrupole. The Kmodulation data can then be used to extract the beta-functions at instruments (e.g. BSRT ) between the quadrupoles. As of 2018, the instruments for which the measured beta-function has been used for calibration are the Wirescanner ( BWS.5 ) and the undulator ( MU.B5 ) or dipole D3 ( MBRS.5 ) for the BSRT . All these instruments are located between Q5R and Q5L . Additionally, in beam 2, between MQM.7L4.B2 and MQY.6L4.B2 the BGV demonstrator is located ( B7L4.B2 ).","title":"Performing Individual Magnet Modulation"},{"location":"gui/kmod/individual_modulation/#circuit-selection","text":"The first step is to select a magnet circuit to use. You can do so under Parameter Selection -> Select Quadrupole . The circuit corresponding to the quadrupole to be modulated has to be selected on the right hand side of the panel and added via the add quadrupole button to the left hand side. As example for the naming convention, the circuit RQ5/.R4B2/K1 corresponds to the MQY.5R4.B2 in the LHC sequence file. Under Trim Function , select Sine Function before continuing. Todo Include screenshot of circuit selection","title":"Circuit Selection"},{"location":"gui/kmod/individual_modulation/#trim-start","text":"The trim current, frequency, and number of cycles should be entered on the right hand side of the window and need to be set via the apply settings button. Normal values for trim I in IR4 are 2A at injection for the Q5 and 12A at 6.5 TeV for the Q5 . Values for other magnets can be found in the elogbook in the shifts logs of the 28/04/2018 and 07/10/2016 . Data acquisition is started with the Start Acquiring button, following by starting the trim with the Start trim button. After the trim is finished, acquisition of data needs to be stopped using the Stop Acquiring button. Todo Include screenshot of trim start Warning The start and end time should be noted down in the elogbook for later data extraction, as no automatic extraction like in the IP modulation case exists.","title":"Trim Start"},{"location":"gui/kmod/individual_modulation/#trim-extraction","text":"After acquisition during a trim, data can then be extracted by selecting the circuit in the Select Quadrupole panel under Parameter selection and pushing the extract previous trim button. The trim start and end times as well as the beam energy need to be entered. In the following panel, the trim data can then be saved via the Save magnet measurement button. Todo Include screenshot of trim extraction The analysis of the extracted Kmod data is described in the next section .","title":"Trim Extraction"},{"location":"gui/kmod/running/","text":"Running the Kmod GUI \u00b6 Running Locally \u00b6 The GUI requires to be on the Technical Network, to which the CERN Control Center is connected. If you are in the GPN but not on the Technical Network, you will need to VPN through some machines to be able to run KMOD , as it needs to connect to LSA . First, install the program sshuttle , which should be available in your package manager. Then, run this command in a terminal and leave it open: sshuttle -vr <username>@cs-ccr-dev2 172 .18.0.0/16 All traffic related to the technical network will be redirected through the cs-ccr-dev2 machine which has access to both networks. In case it isn't available, the other cs-ccr-devX machines can be used. Loading a model \u00b6 You can load the model created from the Beta-Beat GUI or Multiturn GUI for each beam by pressing the load model button. Select the desired model directory in the popup dialog and confirm by pressing the open button. If everything worked fine and the specified folder contains the needed twiss_elements file, the GUI will display the model's name. You can choose another model directory by pressing on the update model button which appears if a model is already selected. The model data is used for preset values in the GUI and the orbit-offset script needs the model for its calculations. Todo Include up-to-date screenshots of model loading, see https://twiki.cern.ch/twiki/bin/view/BEABP/BasicOptions Setting the Beta-Beat.src directory To change the setting of the used Beta-Beat.src directory, navigate to File -> Set Beta-Beat dir and select the location where the Beta-Beat.src directory to be used is located. The Kmod GUI will automatically take the proper Python scripts from this directory. This is automatically reset to the standard directory /afs/cern.ch/eng/sl/lintrack/Beta-Beat.src/ . The GUI will check if the Beta-Beat.src directory contains the ProgramVersions.properties file, which is needed for calling an external python script. You can change the standard directory by creating a user.properties file in the project folder. The kmod GUI will automatically read this file and change the Beta-Beat.src directory to this new value. This file must contain BetaBeatDir=[newBBdir] (replace the placeholder correctly).","title":"Running the GUI"},{"location":"gui/kmod/running/#running-the-kmod-gui","text":"","title":"Running the Kmod GUI"},{"location":"gui/kmod/running/#running-locally","text":"The GUI requires to be on the Technical Network, to which the CERN Control Center is connected. If you are in the GPN but not on the Technical Network, you will need to VPN through some machines to be able to run KMOD , as it needs to connect to LSA . First, install the program sshuttle , which should be available in your package manager. Then, run this command in a terminal and leave it open: sshuttle -vr <username>@cs-ccr-dev2 172 .18.0.0/16 All traffic related to the technical network will be redirected through the cs-ccr-dev2 machine which has access to both networks. In case it isn't available, the other cs-ccr-devX machines can be used.","title":"Running Locally"},{"location":"gui/kmod/running/#loading-a-model","text":"You can load the model created from the Beta-Beat GUI or Multiturn GUI for each beam by pressing the load model button. Select the desired model directory in the popup dialog and confirm by pressing the open button. If everything worked fine and the specified folder contains the needed twiss_elements file, the GUI will display the model's name. You can choose another model directory by pressing on the update model button which appears if a model is already selected. The model data is used for preset values in the GUI and the orbit-offset script needs the model for its calculations. Todo Include up-to-date screenshots of model loading, see https://twiki.cern.ch/twiki/bin/view/BEABP/BasicOptions Setting the Beta-Beat.src directory To change the setting of the used Beta-Beat.src directory, navigate to File -> Set Beta-Beat dir and select the location where the Beta-Beat.src directory to be used is located. The Kmod GUI will automatically take the proper Python scripts from this directory. This is automatically reset to the standard directory /afs/cern.ch/eng/sl/lintrack/Beta-Beat.src/ . The GUI will check if the Beta-Beat.src directory contains the ProgramVersions.properties file, which is needed for calling an external python script. You can change the standard directory by creating a user.properties file in the project folder. The kmod GUI will automatically read this file and change the Beta-Beat.src directory to this new value. This file must contain BetaBeatDir=[newBBdir] (replace the placeholder correctly).","title":"Loading a model"},{"location":"gui/kmod/trim_analysis/","text":"Analyzing Trim Data \u00b6 The Kmod GUI provides functionality to load previously recorded trim data and perform a k-modulation analysis of the results. The steps are described below. Extract Trim Panel \u00b6 If you want to extract data from a previous trim, press on the Extract Previous Trim button. Input the right energy value for this trim in the top right input field and press the Select trim or the Last Trim button. Just ignore the rest (TODO: why???) The Select trim button will open the trim selection panel and the Last trim button will just load the last trim entry from Timber. Todo Include screenshot of trim data extraction If you chose Select trim , then select the desired IP then navigate othe desired date and confirm with pressing on the green Select trim button. You can switch between different IPs and dates by using the combo boxes. Todo Include screenshot of trim selection Measurement View Dialog \u00b6 The selected/loaded trim will then be displayed in the Measurement View Dialog , from which you can analyze the trim data with different options. To get beta star values, press the Analyze Trim button , then in the next dialog select the directory in which to save the trim data and the results. You will need to input the estimated beta star in the horizontal and vertical planes as well as the waist shift for each beam. The values are loaded from the model files. If no model is loaded, you have to input those values. The (old) python code of this script can be found here . The results are stored in the file named beta_star.out . Todo Include screenshots of measurement view dialog Special Case: Individual Magnet Modulation If individual circuits/magnets have been modulated, the analysis cannot (yet) be triggered from the GUI. Instead, the gui2kmod.py script has to be called from the command line. For the input arguments, the working directory ( --working_directory ) should point to a folder where the extracted data of both modulated quadrupoles is present and the --circuit option should be selected, followed by the two circuit names. The initial guesses should be set to a large beta function and waist (e.g. --BetastarAndWaist 200,-100 ) to speed up the convergence. An example script call would look as follow: gui2kmod.py --circuit rq5.l4b1,rq5.r4b1 --beam b1 --BetastarAndWaist 200 ,-100 --instruments MONITOR,RBEND,INSTRUMENT,TKICKER --working_directory /path/to/data Results are then saved in the working directory in a folder with the magnet names. Todo I think Hector took care of Kmod analysis for omc3 so maybe the above tip section should point to the newest codes?","title":"Analyzing Trim Data"},{"location":"gui/kmod/trim_analysis/#analyzing-trim-data","text":"The Kmod GUI provides functionality to load previously recorded trim data and perform a k-modulation analysis of the results. The steps are described below.","title":"Analyzing Trim Data"},{"location":"gui/kmod/trim_analysis/#extract-trim-panel","text":"If you want to extract data from a previous trim, press on the Extract Previous Trim button. Input the right energy value for this trim in the top right input field and press the Select trim or the Last Trim button. Just ignore the rest (TODO: why???) The Select trim button will open the trim selection panel and the Last trim button will just load the last trim entry from Timber. Todo Include screenshot of trim data extraction If you chose Select trim , then select the desired IP then navigate othe desired date and confirm with pressing on the green Select trim button. You can switch between different IPs and dates by using the combo boxes. Todo Include screenshot of trim selection","title":"Extract Trim Panel"},{"location":"gui/kmod/trim_analysis/#measurement-view-dialog","text":"The selected/loaded trim will then be displayed in the Measurement View Dialog , from which you can analyze the trim data with different options. To get beta star values, press the Analyze Trim button , then in the next dialog select the directory in which to save the trim data and the results. You will need to input the estimated beta star in the horizontal and vertical planes as well as the waist shift for each beam. The values are loaded from the model files. If no model is loaded, you have to input those values. The (old) python code of this script can be found here . The results are stored in the file named beta_star.out . Todo Include screenshots of measurement view dialog Special Case: Individual Magnet Modulation If individual circuits/magnets have been modulated, the analysis cannot (yet) be triggered from the GUI. Instead, the gui2kmod.py script has to be called from the command line. For the input arguments, the working directory ( --working_directory ) should point to a folder where the extracted data of both modulated quadrupoles is present and the --circuit option should be selected, followed by the two circuit names. The initial guesses should be set to a large beta function and waist (e.g. --BetastarAndWaist 200,-100 ) to speed up the convergence. An example script call would look as follow: gui2kmod.py --circuit rq5.l4b1,rq5.r4b1 --beam b1 --BetastarAndWaist 200 ,-100 --instruments MONITOR,RBEND,INSTRUMENT,TKICKER --working_directory /path/to/data Results are then saved in the working directory in a folder with the magnet names. Todo I think Hector took care of Kmod analysis for omc3 so maybe the above tip section should point to the newest codes?","title":"Measurement View Dialog"},{"location":"gui/multiturn/gui/","text":"The Multiturn GUI \u00b6","title":"The Multiturn GUI"},{"location":"gui/multiturn/gui/#the-multiturn-gui","text":"","title":"The Multiturn GUI"},{"location":"gui/multiturn/running/","text":"","title":"Running the GUI"},{"location":"packages/betabeatsrc/","text":"","title":"Beta-Beat.src"},{"location":"packages/development/","text":"","title":"Python Development"},{"location":"packages/generic_parser/","text":"The generic_parser package \u00b6","title":"generic_parser"},{"location":"packages/generic_parser/#the-generic_parser-package","text":"","title":"The generic_parser package"},{"location":"packages/mess/","text":"","title":"MESS"},{"location":"packages/pylhc/","text":"","title":"PyLHC"},{"location":"packages/sdds/","text":"","title":"sdds"},{"location":"packages/tfs-pandas/","text":"","title":"tfs-pandas"},{"location":"packages/omc3/about/","text":"The OMC3 Software Documentation \u00b6 The omc3 package is the python tool of the Optics Measurements and Corrections group at CERN. The omc3 repository is the new version of our codes, refactored and rewritten for Python 3.7+ . Note - Documentation Type This section acts as a general documentation and guide to using the omc3 package. The package's source can be found on Github and its API documentation can be found at the following link . Quick start \u00b6 Install the latest version of this package with pip : pip install omc3 What to expect \u00b6 The omc3 package serves the folowing purposes: Providing an all-in-one package for frequency analysis and optics measurements and corrections algorithms in particle accelerators. Providing an easily callable entrypoint to run your analytics from measurement / simulation files. Providing a convenient wrapper to effortlessly run MAD-X jobs. For detailed instructions see the [getting started guide][getting_started.md]. License \u00b6 This software is licensed under the GNU GPLv3 License, see License . Authors \u00b6 This work is the result of combined efforts by members of the pylhc/omc-team working group. Contributions are welcome, but tightly controlled, see the Contributing page.","title":"About omc3"},{"location":"packages/omc3/about/#the-omc3-software-documentation","text":"The omc3 package is the python tool of the Optics Measurements and Corrections group at CERN. The omc3 repository is the new version of our codes, refactored and rewritten for Python 3.7+ . Note - Documentation Type This section acts as a general documentation and guide to using the omc3 package. The package's source can be found on Github and its API documentation can be found at the following link .","title":"The OMC3 Software Documentation"},{"location":"packages/omc3/about/#quick-start","text":"Install the latest version of this package with pip : pip install omc3","title":"Quick start"},{"location":"packages/omc3/about/#what-to-expect","text":"The omc3 package serves the folowing purposes: Providing an all-in-one package for frequency analysis and optics measurements and corrections algorithms in particle accelerators. Providing an easily callable entrypoint to run your analytics from measurement / simulation files. Providing a convenient wrapper to effortlessly run MAD-X jobs. For detailed instructions see the [getting started guide][getting_started.md].","title":"What to expect"},{"location":"packages/omc3/about/#license","text":"This software is licensed under the GNU GPLv3 License, see License .","title":"License"},{"location":"packages/omc3/about/#authors","text":"This work is the result of combined efforts by members of the pylhc/omc-team working group. Contributions are welcome, but tightly controlled, see the Contributing page.","title":"Authors"},{"location":"packages/omc3/contributing/","text":"Contributing \u00b6 Want to report a bug, request a feature or contribute some code? We welcome contributions, but before you do, please read the following guidelines. Submission context \u00b6 Got a question or problem? \u00b6 For quick questions there's no need to open an issue as you can reach us at pylhc@github.com . Our Availability Please note we are busy people and developping omc3 is not our primary priority at work. We may take some time to reply. Found a bug? \u00b6 If you found a bug in the source code, you can help us by submitting an issue on GitHub. If you wish to contribute a solution, you can submit a Pull Request with a fix. However, before doing so, please read the submission guidelines bellow. Missing a feature? \u00b6 You can request a new feature by submitting an issue on GitHub. If you would like to implement a new feature, please submit an issue with a proposal first, to be sure that it is necessary and appropriate to this package. This will also allow us to better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project. Submission guidelines \u00b6 Submitting an issue \u00b6 Before you submit an issue, please search the issue tracker, maybe an issue for your problem already exists and the discussion might inform you of workarounds readily available. We want to fix all the issues as soon as possible, of course, but before fixing a bug we need to reproduce and confirm it: please provide a minimal reproduction scenario. Unfortunately, we are not able to investigate or fix bugs without a minimal reproduction scenario, so if we don't hear back from you we may close the issue. Submitting a Pull Request (PR) \u00b6 First, search GitHub for an open or closed PR that relates to your submission. You don't want to duplicate effort. If you do not find a related issue or PR, go ahead. Development : Clone the project, set up your branch and development environment, make your changes, and add descriptive messages to your commits. Please reference the issue number in your commit header messages so that your commits appear on the issue tracker. Build : Before submitting changes, please make sure tests pass and that the package properly installs. The project comes with a Makefile to help with this, you can get an overview of the available targets with make help . This is a mandatory requirement for your PR to get accepted, as the package should at all times be installable without trouble through GitHub. Pull Request : After having worked on your changes and pushed them to Github, open a Pull Request to the master branch. Review and approval by at least one of our team members is required before accepting changes. If new changes are suggested, make the required updates and push the changes again, which will automatically update your PR. After your PR is accepted by a team member, please select squash and merge to merge into master. Afterwards, you can safely delete your branch and close the issue. Python Coding Guidelines \u00b6 We strive to use a common codestyle for our software. Please follow these guidelines to keep code cohesion up, and git diffs down. Naming Conventions \u00b6 Overall, please abide by PEP8 : Module, functions, methods, attributes and local variable names: use snake_case . Example: segment_by_segment.py , get_phase.py . Class names: use PascalCase . Example: FileWriter , FixedTfs . Module constants: Uppercase words divided by underscores. Example: INDEX_ID , DEFAULT_COLUMN_WIDTH . Private methods, functions and variables: see above, but precede the name by an underscore. Example: _validate_index_type , _get_header_line . Code Structure \u00b6 Make the code as readable as possible, both for collaborators and future you. Use descriptive variable names. Use descriptive function names. Respect the max line length of 100 characters. Divide code blocks into simple functions. Avoid code duplication. Respect the Zen of Python . We use PyCharm as IDE in the team. Docstrings Convention \u00b6 To be compatible with our automatic API documentation generator, please respect Sphinx conventions.","title":"Contributing"},{"location":"packages/omc3/contributing/#contributing","text":"Want to report a bug, request a feature or contribute some code? We welcome contributions, but before you do, please read the following guidelines.","title":"Contributing"},{"location":"packages/omc3/contributing/#submission-context","text":"","title":"Submission context"},{"location":"packages/omc3/contributing/#got-a-question-or-problem","text":"For quick questions there's no need to open an issue as you can reach us at pylhc@github.com . Our Availability Please note we are busy people and developping omc3 is not our primary priority at work. We may take some time to reply.","title":"Got a question or problem?"},{"location":"packages/omc3/contributing/#found-a-bug","text":"If you found a bug in the source code, you can help us by submitting an issue on GitHub. If you wish to contribute a solution, you can submit a Pull Request with a fix. However, before doing so, please read the submission guidelines bellow.","title":"Found a bug?"},{"location":"packages/omc3/contributing/#missing-a-feature","text":"You can request a new feature by submitting an issue on GitHub. If you would like to implement a new feature, please submit an issue with a proposal first, to be sure that it is necessary and appropriate to this package. This will also allow us to better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project.","title":"Missing a feature?"},{"location":"packages/omc3/contributing/#submission-guidelines","text":"","title":"Submission guidelines"},{"location":"packages/omc3/contributing/#submitting-an-issue","text":"Before you submit an issue, please search the issue tracker, maybe an issue for your problem already exists and the discussion might inform you of workarounds readily available. We want to fix all the issues as soon as possible, of course, but before fixing a bug we need to reproduce and confirm it: please provide a minimal reproduction scenario. Unfortunately, we are not able to investigate or fix bugs without a minimal reproduction scenario, so if we don't hear back from you we may close the issue.","title":"Submitting an issue"},{"location":"packages/omc3/contributing/#submitting-a-pull-request-pr","text":"First, search GitHub for an open or closed PR that relates to your submission. You don't want to duplicate effort. If you do not find a related issue or PR, go ahead. Development : Clone the project, set up your branch and development environment, make your changes, and add descriptive messages to your commits. Please reference the issue number in your commit header messages so that your commits appear on the issue tracker. Build : Before submitting changes, please make sure tests pass and that the package properly installs. The project comes with a Makefile to help with this, you can get an overview of the available targets with make help . This is a mandatory requirement for your PR to get accepted, as the package should at all times be installable without trouble through GitHub. Pull Request : After having worked on your changes and pushed them to Github, open a Pull Request to the master branch. Review and approval by at least one of our team members is required before accepting changes. If new changes are suggested, make the required updates and push the changes again, which will automatically update your PR. After your PR is accepted by a team member, please select squash and merge to merge into master. Afterwards, you can safely delete your branch and close the issue.","title":"Submitting a Pull Request (PR)"},{"location":"packages/omc3/contributing/#python-coding-guidelines","text":"We strive to use a common codestyle for our software. Please follow these guidelines to keep code cohesion up, and git diffs down.","title":"Python Coding Guidelines"},{"location":"packages/omc3/contributing/#naming-conventions","text":"Overall, please abide by PEP8 : Module, functions, methods, attributes and local variable names: use snake_case . Example: segment_by_segment.py , get_phase.py . Class names: use PascalCase . Example: FileWriter , FixedTfs . Module constants: Uppercase words divided by underscores. Example: INDEX_ID , DEFAULT_COLUMN_WIDTH . Private methods, functions and variables: see above, but precede the name by an underscore. Example: _validate_index_type , _get_header_line .","title":"Naming Conventions"},{"location":"packages/omc3/contributing/#code-structure","text":"Make the code as readable as possible, both for collaborators and future you. Use descriptive variable names. Use descriptive function names. Respect the max line length of 100 characters. Divide code blocks into simple functions. Avoid code duplication. Respect the Zen of Python . We use PyCharm as IDE in the team.","title":"Code Structure"},{"location":"packages/omc3/contributing/#docstrings-convention","text":"To be compatible with our automatic API documentation generator, please respect Sphinx conventions.","title":"Docstrings Convention"},{"location":"packages/omc3/getting_started/","text":"Getting Started with OMC3 \u00b6 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut aliquam id purus eu accumsan. Quisque metus dui, viverra in tortor tincidunt, laoreet fermentum risus. Etiam gravida orci non dolor tristique consectetur. Mauris aliquet dui sit amet velit tempor finibus. Aliquam non ullamcorper neque. Praesent aliquam magna eros, quis rutrum sapien scelerisque non. Vestibulum ipsum ipsum, placerat non ornare tincidunt, posuere feugiat odio. Nam ac leo odio. Cras rutrum sem sed sem faucibus, vitae rhoncus odio gravida. Nunc vestibulum nisl lorem, ac ornare nunc vulputate nec. Donec commodo lacus in mi facilisis, at semper ligula facilisis. Aliquam et augue scelerisque, elementum libero quis, tincidunt ligula.","title":"Getting Started"},{"location":"packages/omc3/getting_started/#getting-started-with-omc3","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut aliquam id purus eu accumsan. Quisque metus dui, viverra in tortor tincidunt, laoreet fermentum risus. Etiam gravida orci non dolor tristique consectetur. Mauris aliquet dui sit amet velit tempor finibus. Aliquam non ullamcorper neque. Praesent aliquam magna eros, quis rutrum sapien scelerisque non. Vestibulum ipsum ipsum, placerat non ornare tincidunt, posuere feugiat odio. Nam ac leo odio. Cras rutrum sem sed sem faucibus, vitae rhoncus odio gravida. Nunc vestibulum nisl lorem, ac ornare nunc vulputate nec. Donec commodo lacus in mi facilisis, at semper ligula facilisis. Aliquam et augue scelerisque, elementum libero quis, tincidunt ligula.","title":"Getting Started with OMC3"},{"location":"packages/omc3/release_notes/","text":"Release notes \u00b6 Upgrading \u00b6 To upgrade omc3 to the latest version, use pip : pip install --upgrade omc3 To inspect the currently installed version, use the following command: pip show omc3 Changelog \u00b6 0.1.0 Date ??? \u00b6 Initial release. omc3 is packaged. Hole_in_one , harpy for harmonic analysis, utilities and madx_wrapper are functional.","title":"Release Notes"},{"location":"packages/omc3/release_notes/#release-notes","text":"","title":"Release notes"},{"location":"packages/omc3/release_notes/#upgrading","text":"To upgrade omc3 to the latest version, use pip : pip install --upgrade omc3 To inspect the currently installed version, use the following command: pip show omc3","title":"Upgrading"},{"location":"packages/omc3/release_notes/#changelog","text":"","title":"Changelog"},{"location":"packages/omc3/release_notes/#010-date","text":"Initial release. omc3 is packaged. Hole_in_one , harpy for harmonic analysis, utilities and madx_wrapper are functional.","title":"0.1.0  Date ???"},{"location":"packages/omc3/workflow/","text":"OMC3 Sotfware Workflow \u00b6 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut aliquam id purus eu accumsan. Quisque metus dui, viverra in tortor tincidunt, laoreet fermentum risus. Etiam gravida orci non dolor tristique consectetur. Mauris aliquet dui sit amet velit tempor finibus. Aliquam non ullamcorper neque. Praesent aliquam magna eros, quis rutrum sapien scelerisque non. Vestibulum ipsum ipsum, placerat non ornare tincidunt, posuere feugiat odio. Nam ac leo odio. Cras rutrum sem sed sem faucibus, vitae rhoncus odio gravida. Nunc vestibulum nisl lorem, ac ornare nunc vulputate nec. Donec commodo lacus in mi facilisis, at semper ligula facilisis. Aliquam et augue scelerisque, elementum libero quis, tincidunt ligula.","title":"Workflow"},{"location":"packages/omc3/workflow/#omc3-sotfware-workflow","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut aliquam id purus eu accumsan. Quisque metus dui, viverra in tortor tincidunt, laoreet fermentum risus. Etiam gravida orci non dolor tristique consectetur. Mauris aliquet dui sit amet velit tempor finibus. Aliquam non ullamcorper neque. Praesent aliquam magna eros, quis rutrum sapien scelerisque non. Vestibulum ipsum ipsum, placerat non ornare tincidunt, posuere feugiat odio. Nam ac leo odio. Cras rutrum sem sed sem faucibus, vitae rhoncus odio gravida. Nunc vestibulum nisl lorem, ac ornare nunc vulputate nec. Donec commodo lacus in mi facilisis, at semper ligula facilisis. Aliquam et augue scelerisque, elementum libero quis, tincidunt ligula.","title":"OMC3 Sotfware Workflow"}]}